// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package main

import (
	"context"
	"github.com/beltran/gohive/gohivemeta/fb303"
	"flag"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/beltran/gohive/gohivemeta/hive_metastore"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

var _ = fb303.GoUnusedProtection__
var _ = hive_metastore.GoUnusedProtection__

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  string getMetaConf(string key)")
	fmt.Fprintln(os.Stderr, "  void setMetaConf(string key, string value)")
	fmt.Fprintln(os.Stderr, "  void create_catalog(CreateCatalogRequest catalog)")
	fmt.Fprintln(os.Stderr, "  void alter_catalog(AlterCatalogRequest rqst)")
	fmt.Fprintln(os.Stderr, "  GetCatalogResponse get_catalog(GetCatalogRequest catName)")
	fmt.Fprintln(os.Stderr, "  GetCatalogsResponse get_catalogs()")
	fmt.Fprintln(os.Stderr, "  void drop_catalog(DropCatalogRequest catName)")
	fmt.Fprintln(os.Stderr, "  void create_database(Database database)")
	fmt.Fprintln(os.Stderr, "  Database get_database(string name)")
	fmt.Fprintln(os.Stderr, "  Database get_database_req(GetDatabaseRequest request)")
	fmt.Fprintln(os.Stderr, "  void drop_database(string name, bool deleteData, bool cascade)")
	fmt.Fprintln(os.Stderr, "   get_databases(string pattern)")
	fmt.Fprintln(os.Stderr, "   get_all_databases()")
	fmt.Fprintln(os.Stderr, "  void alter_database(string dbname, Database db)")
	fmt.Fprintln(os.Stderr, "  void create_dataconnector(DataConnector connector)")
	fmt.Fprintln(os.Stderr, "  DataConnector get_dataconnector_req(GetDataConnectorRequest request)")
	fmt.Fprintln(os.Stderr, "  void drop_dataconnector(string name, bool ifNotExists, bool checkReferences)")
	fmt.Fprintln(os.Stderr, "   get_dataconnectors()")
	fmt.Fprintln(os.Stderr, "  void alter_dataconnector(string name, DataConnector connector)")
	fmt.Fprintln(os.Stderr, "  Type get_type(string name)")
	fmt.Fprintln(os.Stderr, "  bool create_type(Type type)")
	fmt.Fprintln(os.Stderr, "  bool drop_type(string type)")
	fmt.Fprintln(os.Stderr, "   get_type_all(string name)")
	fmt.Fprintln(os.Stderr, "   get_fields(string db_name, string table_name)")
	fmt.Fprintln(os.Stderr, "   get_fields_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  GetFieldsResponse get_fields_req(GetFieldsRequest req)")
	fmt.Fprintln(os.Stderr, "   get_schema(string db_name, string table_name)")
	fmt.Fprintln(os.Stderr, "   get_schema_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  GetSchemaResponse get_schema_req(GetSchemaRequest req)")
	fmt.Fprintln(os.Stderr, "  void create_table(Table tbl)")
	fmt.Fprintln(os.Stderr, "  void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void create_table_with_constraints(Table tbl,  primaryKeys,  foreignKeys,  uniqueConstraints,  notNullConstraints,  defaultConstraints,  checkConstraints)")
	fmt.Fprintln(os.Stderr, "  void create_table_req(CreateTableRequest request)")
	fmt.Fprintln(os.Stderr, "  void drop_constraint(DropConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_primary_key(AddPrimaryKeyRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_foreign_key(AddForeignKeyRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_unique_constraint(AddUniqueConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_not_null_constraint(AddNotNullConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_default_constraint(AddDefaultConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void add_check_constraint(AddCheckConstraintRequest req)")
	fmt.Fprintln(os.Stderr, "  void drop_table(string dbname, string name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  void drop_table_with_environment_context(string dbname, string name, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void truncate_table(string dbName, string tableName,  partNames)")
	fmt.Fprintln(os.Stderr, "  TruncateTableResponse truncate_table_req(TruncateTableRequest req)")
	fmt.Fprintln(os.Stderr, "   get_tables(string db_name, string pattern)")
	fmt.Fprintln(os.Stderr, "   get_tables_by_type(string db_name, string pattern, string tableType)")
	fmt.Fprintln(os.Stderr, "   get_all_materialized_view_objects_for_rewriting()")
	fmt.Fprintln(os.Stderr, "   get_materialized_views_for_rewriting(string db_name)")
	fmt.Fprintln(os.Stderr, "   get_table_meta(string db_patterns, string tbl_patterns,  tbl_types)")
	fmt.Fprintln(os.Stderr, "   get_all_tables(string db_name)")
	fmt.Fprintln(os.Stderr, "  Table get_table(string dbname, string tbl_name)")
	fmt.Fprintln(os.Stderr, "   get_table_objects_by_name(string dbname,  tbl_names)")
	fmt.Fprintln(os.Stderr, "   get_tables_ext(GetTablesExtRequest req)")
	fmt.Fprintln(os.Stderr, "  GetTableResult get_table_req(GetTableRequest req)")
	fmt.Fprintln(os.Stderr, "  GetTablesResult get_table_objects_by_name_req(GetTablesRequest req)")
	fmt.Fprintln(os.Stderr, "  Materialization get_materialization_invalidation_info(CreationMetadata creation_metadata, string validTxnList)")
	fmt.Fprintln(os.Stderr, "  void update_creation_metadata(string catName, string dbname, string tbl_name, CreationMetadata creation_metadata)")
	fmt.Fprintln(os.Stderr, "   get_table_names_by_filter(string dbname, string filter, i16 max_tables)")
	fmt.Fprintln(os.Stderr, "  void alter_table(string dbname, string tbl_name, Table new_tbl)")
	fmt.Fprintln(os.Stderr, "  void alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void alter_table_with_cascade(string dbname, string tbl_name, Table new_tbl, bool cascade)")
	fmt.Fprintln(os.Stderr, "  AlterTableResponse alter_table_req(AlterTableRequest req)")
	fmt.Fprintln(os.Stderr, "  Partition add_partition(Partition new_part)")
	fmt.Fprintln(os.Stderr, "  Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  i32 add_partitions( new_parts)")
	fmt.Fprintln(os.Stderr, "  i32 add_partitions_pspec( new_parts)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition(string db_name, string tbl_name,  part_vals)")
	fmt.Fprintln(os.Stderr, "  AddPartitionsResult add_partitions_req(AddPartitionsRequest request)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_with_environment_context(string db_name, string tbl_name,  part_vals, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name(string db_name, string tbl_name, string part_name)")
	fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition(string db_name, string tbl_name,  part_vals, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_with_environment_context(string db_name, string tbl_name,  part_vals, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)")
	fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  DropPartitionsResult drop_partitions_req(DropPartitionsRequest req)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition(string db_name, string tbl_name,  part_vals)")
	fmt.Fprintln(os.Stderr, "  GetPartitionResponse get_partition_req(GetPartitionRequest req)")
	fmt.Fprintln(os.Stderr, "  Partition exchange_partition( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
	fmt.Fprintln(os.Stderr, "   exchange_partitions( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition_with_auth(string db_name, string tbl_name,  part_vals, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "  Partition get_partition_by_name(string db_name, string tbl_name, string part_name)")
	fmt.Fprintln(os.Stderr, "   get_partitions(string db_name, string tbl_name, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "  PartitionsResponse get_partitions_req(PartitionsRequest req)")
	fmt.Fprintln(os.Stderr, "   get_partitions_with_auth(string db_name, string tbl_name, i16 max_parts, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   get_partitions_pspec(string db_name, string tbl_name, i32 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partition_names(string db_name, string tbl_name, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "  PartitionValuesResponse get_partition_values(PartitionValuesRequest request)")
	fmt.Fprintln(os.Stderr, "   get_partitions_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_partitions_ps_with_auth(string db_name, string tbl_name,  part_vals, i16 max_parts, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "  GetPartitionsPsWithAuthResponse get_partitions_ps_with_auth_req(GetPartitionsPsWithAuthRequest req)")
	fmt.Fprintln(os.Stderr, "   get_partition_names_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "  GetPartitionNamesPsResponse get_partition_names_ps_req(GetPartitionNamesPsRequest req)")
	fmt.Fprintln(os.Stderr, "   get_partition_names_req(PartitionsByExprRequest req)")
	fmt.Fprintln(os.Stderr, "   get_partitions_by_filter(string db_name, string tbl_name, string filter, i16 max_parts)")
	fmt.Fprintln(os.Stderr, "   get_part_specs_by_filter(string db_name, string tbl_name, string filter, i32 max_parts)")
	fmt.Fprintln(os.Stderr, "  PartitionsByExprResult get_partitions_by_expr(PartitionsByExprRequest req)")
	fmt.Fprintln(os.Stderr, "  PartitionsSpecByExprResult get_partitions_spec_by_expr(PartitionsByExprRequest req)")
	fmt.Fprintln(os.Stderr, "  i32 get_num_partitions_by_filter(string db_name, string tbl_name, string filter)")
	fmt.Fprintln(os.Stderr, "   get_partitions_by_names(string db_name, string tbl_name,  names)")
	fmt.Fprintln(os.Stderr, "  GetPartitionsByNamesResult get_partitions_by_names_req(GetPartitionsByNamesRequest req)")
	fmt.Fprintln(os.Stderr, "  void alter_partition(string db_name, string tbl_name, Partition new_part)")
	fmt.Fprintln(os.Stderr, "  void alter_partitions(string db_name, string tbl_name,  new_parts)")
	fmt.Fprintln(os.Stderr, "  void alter_partitions_with_environment_context(string db_name, string tbl_name,  new_parts, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  AlterPartitionsResponse alter_partitions_req(AlterPartitionsRequest req)")
	fmt.Fprintln(os.Stderr, "  void alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)")
	fmt.Fprintln(os.Stderr, "  void rename_partition(string db_name, string tbl_name,  part_vals, Partition new_part)")
	fmt.Fprintln(os.Stderr, "  RenamePartitionResponse rename_partition_req(RenamePartitionRequest req)")
	fmt.Fprintln(os.Stderr, "  bool partition_name_has_valid_characters( part_vals, bool throw_exception)")
	fmt.Fprintln(os.Stderr, "  string get_config_value(string name, string defaultValue)")
	fmt.Fprintln(os.Stderr, "   partition_name_to_vals(string part_name)")
	fmt.Fprintln(os.Stderr, "   partition_name_to_spec(string part_name)")
	fmt.Fprintln(os.Stderr, "  void markPartitionForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
	fmt.Fprintln(os.Stderr, "  bool isPartitionMarkedForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
	fmt.Fprintln(os.Stderr, "  PrimaryKeysResponse get_primary_keys(PrimaryKeysRequest request)")
	fmt.Fprintln(os.Stderr, "  ForeignKeysResponse get_foreign_keys(ForeignKeysRequest request)")
	fmt.Fprintln(os.Stderr, "  UniqueConstraintsResponse get_unique_constraints(UniqueConstraintsRequest request)")
	fmt.Fprintln(os.Stderr, "  NotNullConstraintsResponse get_not_null_constraints(NotNullConstraintsRequest request)")
	fmt.Fprintln(os.Stderr, "  DefaultConstraintsResponse get_default_constraints(DefaultConstraintsRequest request)")
	fmt.Fprintln(os.Stderr, "  CheckConstraintsResponse get_check_constraints(CheckConstraintsRequest request)")
	fmt.Fprintln(os.Stderr, "  AllTableConstraintsResponse get_all_table_constraints(AllTableConstraintsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool update_table_column_statistics(ColumnStatistics stats_obj)")
	fmt.Fprintln(os.Stderr, "  bool update_partition_column_statistics(ColumnStatistics stats_obj)")
	fmt.Fprintln(os.Stderr, "  SetPartitionsStatsResponse update_table_column_statistics_req(SetPartitionsStatsRequest req)")
	fmt.Fprintln(os.Stderr, "  SetPartitionsStatsResponse update_partition_column_statistics_req(SetPartitionsStatsRequest req)")
	fmt.Fprintln(os.Stderr, "  ColumnStatistics get_table_column_statistics(string db_name, string tbl_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  ColumnStatistics get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
	fmt.Fprintln(os.Stderr, "  TableStatsResult get_table_statistics_req(TableStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  PartitionsStatsResult get_partitions_statistics_req(PartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  AggrStats get_aggr_stats_for(PartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool set_aggr_stats_for(SetPartitionsStatsRequest request)")
	fmt.Fprintln(os.Stderr, "  bool delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name, string engine)")
	fmt.Fprintln(os.Stderr, "  bool delete_table_column_statistics(string db_name, string tbl_name, string col_name, string engine)")
	fmt.Fprintln(os.Stderr, "  void create_function(Function func)")
	fmt.Fprintln(os.Stderr, "  void drop_function(string dbName, string funcName)")
	fmt.Fprintln(os.Stderr, "  void alter_function(string dbName, string funcName, Function newFunc)")
	fmt.Fprintln(os.Stderr, "   get_functions(string dbName, string pattern)")
	fmt.Fprintln(os.Stderr, "  Function get_function(string dbName, string funcName)")
	fmt.Fprintln(os.Stderr, "  GetAllFunctionsResponse get_all_functions()")
	fmt.Fprintln(os.Stderr, "  bool create_role(Role role)")
	fmt.Fprintln(os.Stderr, "  bool drop_role(string role_name)")
	fmt.Fprintln(os.Stderr, "   get_role_names()")
	fmt.Fprintln(os.Stderr, "  bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)")
	fmt.Fprintln(os.Stderr, "  bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)")
	fmt.Fprintln(os.Stderr, "   list_roles(string principal_name, PrincipalType principal_type)")
	fmt.Fprintln(os.Stderr, "  GrantRevokeRoleResponse grant_revoke_role(GrantRevokeRoleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetPrincipalsInRoleResponse get_principals_in_role(GetPrincipalsInRoleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetRoleGrantsForPrincipalResponse get_role_grants_for_principal(GetRoleGrantsForPrincipalRequest request)")
	fmt.Fprintln(os.Stderr, "  PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "   list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)")
	fmt.Fprintln(os.Stderr, "  bool grant_privileges(PrivilegeBag privileges)")
	fmt.Fprintln(os.Stderr, "  bool revoke_privileges(PrivilegeBag privileges)")
	fmt.Fprintln(os.Stderr, "  GrantRevokePrivilegeResponse grant_revoke_privileges(GrantRevokePrivilegeRequest request)")
	fmt.Fprintln(os.Stderr, "  GrantRevokePrivilegeResponse refresh_privileges(HiveObjectRef objToRefresh, string authorizer, GrantRevokePrivilegeRequest grantRequest)")
	fmt.Fprintln(os.Stderr, "   set_ugi(string user_name,  group_names)")
	fmt.Fprintln(os.Stderr, "  string get_delegation_token(string token_owner, string renewer_kerberos_principal_name)")
	fmt.Fprintln(os.Stderr, "  i64 renew_delegation_token(string token_str_form)")
	fmt.Fprintln(os.Stderr, "  void cancel_delegation_token(string token_str_form)")
	fmt.Fprintln(os.Stderr, "  bool add_token(string token_identifier, string delegation_token)")
	fmt.Fprintln(os.Stderr, "  bool remove_token(string token_identifier)")
	fmt.Fprintln(os.Stderr, "  string get_token(string token_identifier)")
	fmt.Fprintln(os.Stderr, "   get_all_token_identifiers()")
	fmt.Fprintln(os.Stderr, "  i32 add_master_key(string key)")
	fmt.Fprintln(os.Stderr, "  void update_master_key(i32 seq_number, string key)")
	fmt.Fprintln(os.Stderr, "  bool remove_master_key(i32 key_seq)")
	fmt.Fprintln(os.Stderr, "   get_master_keys()")
	fmt.Fprintln(os.Stderr, "  GetOpenTxnsResponse get_open_txns()")
	fmt.Fprintln(os.Stderr, "  GetOpenTxnsInfoResponse get_open_txns_info()")
	fmt.Fprintln(os.Stderr, "  OpenTxnsResponse open_txns(OpenTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void abort_txn(AbortTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void abort_txns(AbortTxnsRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void commit_txn(CommitTxnRequest rqst)")
	fmt.Fprintln(os.Stderr, "  i64 get_latest_txnid_in_conflict(i64 txnId)")
	fmt.Fprintln(os.Stderr, "  void repl_tbl_writeid_state(ReplTblWriteIdStateRequest rqst)")
	fmt.Fprintln(os.Stderr, "  GetValidWriteIdsResponse get_valid_write_ids(GetValidWriteIdsRequest rqst)")
	fmt.Fprintln(os.Stderr, "  AllocateTableWriteIdsResponse allocate_table_write_ids(AllocateTableWriteIdsRequest rqst)")
	fmt.Fprintln(os.Stderr, "  MaxAllocatedTableWriteIdResponse get_max_allocated_table_write_id(MaxAllocatedTableWriteIdRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void seed_write_id(SeedTableWriteIdsRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void seed_txn_id(SeedTxnIdRequest rqst)")
	fmt.Fprintln(os.Stderr, "  LockResponse lock(LockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  LockResponse check_lock(CheckLockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void unlock(UnlockRequest rqst)")
	fmt.Fprintln(os.Stderr, "  ShowLocksResponse show_locks(ShowLocksRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void heartbeat(HeartbeatRequest ids)")
	fmt.Fprintln(os.Stderr, "  HeartbeatTxnRangeResponse heartbeat_txn_range(HeartbeatTxnRangeRequest txns)")
	fmt.Fprintln(os.Stderr, "  void compact(CompactionRequest rqst)")
	fmt.Fprintln(os.Stderr, "  CompactionResponse compact2(CompactionRequest rqst)")
	fmt.Fprintln(os.Stderr, "  ShowCompactResponse show_compact(ShowCompactRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void add_dynamic_partitions(AddDynamicPartitions rqst)")
	fmt.Fprintln(os.Stderr, "  OptionalCompactionInfoStruct find_next_compact(string workerId, string workerVersion)")
	fmt.Fprintln(os.Stderr, "  void update_compactor_state(CompactionInfoStruct cr, i64 txn_id)")
	fmt.Fprintln(os.Stderr, "   find_columns_with_stats(CompactionInfoStruct cr)")
	fmt.Fprintln(os.Stderr, "  void mark_cleaned(CompactionInfoStruct cr)")
	fmt.Fprintln(os.Stderr, "  void mark_compacted(CompactionInfoStruct cr)")
	fmt.Fprintln(os.Stderr, "  void mark_failed(CompactionInfoStruct cr)")
	fmt.Fprintln(os.Stderr, "  void set_hadoop_jobid(string jobId, i64 cq_id)")
	fmt.Fprintln(os.Stderr, "  GetLatestCommittedCompactionInfoResponse get_latest_committed_compaction_info(GetLatestCommittedCompactionInfoRequest rqst)")
	fmt.Fprintln(os.Stderr, "  NotificationEventResponse get_next_notification(NotificationEventRequest rqst)")
	fmt.Fprintln(os.Stderr, "  CurrentNotificationEventId get_current_notificationEventId()")
	fmt.Fprintln(os.Stderr, "  NotificationEventsCountResponse get_notification_events_count(NotificationEventsCountRequest rqst)")
	fmt.Fprintln(os.Stderr, "  FireEventResponse fire_listener_event(FireEventRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void flushCache()")
	fmt.Fprintln(os.Stderr, "  WriteNotificationLogResponse add_write_notification_log(WriteNotificationLogRequest rqst)")
	fmt.Fprintln(os.Stderr, "  CmRecycleResponse cm_recycle(CmRecycleRequest request)")
	fmt.Fprintln(os.Stderr, "  GetFileMetadataByExprResult get_file_metadata_by_expr(GetFileMetadataByExprRequest req)")
	fmt.Fprintln(os.Stderr, "  GetFileMetadataResult get_file_metadata(GetFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  PutFileMetadataResult put_file_metadata(PutFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  ClearFileMetadataResult clear_file_metadata(ClearFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  CacheFileMetadataResult cache_file_metadata(CacheFileMetadataRequest req)")
	fmt.Fprintln(os.Stderr, "  string get_metastore_db_uuid()")
	fmt.Fprintln(os.Stderr, "  WMCreateResourcePlanResponse create_resource_plan(WMCreateResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetResourcePlanResponse get_resource_plan(WMGetResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetActiveResourcePlanResponse get_active_resource_plan(WMGetActiveResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetAllResourcePlanResponse get_all_resource_plans(WMGetAllResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMAlterResourcePlanResponse alter_resource_plan(WMAlterResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMValidateResourcePlanResponse validate_resource_plan(WMValidateResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMDropResourcePlanResponse drop_resource_plan(WMDropResourcePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMCreateTriggerResponse create_wm_trigger(WMCreateTriggerRequest request)")
	fmt.Fprintln(os.Stderr, "  WMAlterTriggerResponse alter_wm_trigger(WMAlterTriggerRequest request)")
	fmt.Fprintln(os.Stderr, "  WMDropTriggerResponse drop_wm_trigger(WMDropTriggerRequest request)")
	fmt.Fprintln(os.Stderr, "  WMGetTriggersForResourePlanResponse get_triggers_for_resourceplan(WMGetTriggersForResourePlanRequest request)")
	fmt.Fprintln(os.Stderr, "  WMCreatePoolResponse create_wm_pool(WMCreatePoolRequest request)")
	fmt.Fprintln(os.Stderr, "  WMAlterPoolResponse alter_wm_pool(WMAlterPoolRequest request)")
	fmt.Fprintln(os.Stderr, "  WMDropPoolResponse drop_wm_pool(WMDropPoolRequest request)")
	fmt.Fprintln(os.Stderr, "  WMCreateOrUpdateMappingResponse create_or_update_wm_mapping(WMCreateOrUpdateMappingRequest request)")
	fmt.Fprintln(os.Stderr, "  WMDropMappingResponse drop_wm_mapping(WMDropMappingRequest request)")
	fmt.Fprintln(os.Stderr, "  WMCreateOrDropTriggerToPoolMappingResponse create_or_drop_wm_trigger_to_pool_mapping(WMCreateOrDropTriggerToPoolMappingRequest request)")
	fmt.Fprintln(os.Stderr, "  void create_ischema(ISchema schema)")
	fmt.Fprintln(os.Stderr, "  void alter_ischema(AlterISchemaRequest rqst)")
	fmt.Fprintln(os.Stderr, "  ISchema get_ischema(ISchemaName name)")
	fmt.Fprintln(os.Stderr, "  void drop_ischema(ISchemaName name)")
	fmt.Fprintln(os.Stderr, "  void add_schema_version(SchemaVersion schemaVersion)")
	fmt.Fprintln(os.Stderr, "  SchemaVersion get_schema_version(SchemaVersionDescriptor schemaVersion)")
	fmt.Fprintln(os.Stderr, "  SchemaVersion get_schema_latest_version(ISchemaName schemaName)")
	fmt.Fprintln(os.Stderr, "   get_schema_all_versions(ISchemaName schemaName)")
	fmt.Fprintln(os.Stderr, "  void drop_schema_version(SchemaVersionDescriptor schemaVersion)")
	fmt.Fprintln(os.Stderr, "  FindSchemasByColsResp get_schemas_by_cols(FindSchemasByColsRqst rqst)")
	fmt.Fprintln(os.Stderr, "  void map_schema_version_to_serde(MapSchemaVersionToSerdeRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void set_schema_version_state(SetSchemaVersionStateRequest rqst)")
	fmt.Fprintln(os.Stderr, "  void add_serde(SerDeInfo serde)")
	fmt.Fprintln(os.Stderr, "  SerDeInfo get_serde(GetSerdeRequest rqst)")
	fmt.Fprintln(os.Stderr, "  LockResponse get_lock_materialization_rebuild(string dbName, string tableName, i64 txnId)")
	fmt.Fprintln(os.Stderr, "  bool heartbeat_lock_materialization_rebuild(string dbName, string tableName, i64 txnId)")
	fmt.Fprintln(os.Stderr, "  void add_runtime_stats(RuntimeStat stat)")
	fmt.Fprintln(os.Stderr, "   get_runtime_stats(GetRuntimeStatsRequest rqst)")
	fmt.Fprintln(os.Stderr, "  GetPartitionsResponse get_partitions_with_specs(GetPartitionsRequest request)")
	fmt.Fprintln(os.Stderr, "  ScheduledQueryPollResponse scheduled_query_poll(ScheduledQueryPollRequest request)")
	fmt.Fprintln(os.Stderr, "  void scheduled_query_maintenance(ScheduledQueryMaintenanceRequest request)")
	fmt.Fprintln(os.Stderr, "  void scheduled_query_progress(ScheduledQueryProgressInfo info)")
	fmt.Fprintln(os.Stderr, "  ScheduledQuery get_scheduled_query(ScheduledQueryKey scheduleKey)")
	fmt.Fprintln(os.Stderr, "  void add_replication_metrics(ReplicationMetricList replicationMetricList)")
	fmt.Fprintln(os.Stderr, "  ReplicationMetricList get_replication_metrics(GetReplicationMetricsRequest rqst)")
	fmt.Fprintln(os.Stderr, "  GetOpenTxnsResponse get_open_txns_req(GetOpenTxnsRequest getOpenTxnsRequest)")
	fmt.Fprintln(os.Stderr, "  void create_stored_procedure(StoredProcedure proc)")
	fmt.Fprintln(os.Stderr, "  StoredProcedure get_stored_procedure(StoredProcedureRequest request)")
	fmt.Fprintln(os.Stderr, "  void drop_stored_procedure(StoredProcedureRequest request)")
	fmt.Fprintln(os.Stderr, "   get_all_stored_procedures(ListStoredProcedureRequest request)")
	fmt.Fprintln(os.Stderr, "  Package find_package(GetPackageRequest request)")
	fmt.Fprintln(os.Stderr, "  void add_package(AddPackageRequest request)")
	fmt.Fprintln(os.Stderr, "   get_all_packages(ListPackageRequest request)")
	fmt.Fprintln(os.Stderr, "  void drop_package(DropPackageRequest request)")
	fmt.Fprintln(os.Stderr, "  string getName()")
	fmt.Fprintln(os.Stderr, "  string getVersion()")
	fmt.Fprintln(os.Stderr, "  fb_status getStatus()")
	fmt.Fprintln(os.Stderr, "  string getStatusDetails()")
	fmt.Fprintln(os.Stderr, "   getCounters()")
	fmt.Fprintln(os.Stderr, "  i64 getCounter(string key)")
	fmt.Fprintln(os.Stderr, "  void setOption(string key, string value)")
	fmt.Fprintln(os.Stderr, "  string getOption(string key)")
	fmt.Fprintln(os.Stderr, "   getOptions()")
	fmt.Fprintln(os.Stderr, "  string getCpuProfile(i32 profileDurationInSec)")
	fmt.Fprintln(os.Stderr, "  i64 aliveSince()")
	fmt.Fprintln(os.Stderr, "  void reinitialize()")
	fmt.Fprintln(os.Stderr, "  void shutdown()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
	var m map[string]string = h
	return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
	if len(parts) != 2 {
		return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
	return nil
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
		if len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
			for key, value := range headers {
				httptrans.SetHeader(key, value)
			}
		}
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := hive_metastore.NewThriftHiveMetastoreClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "getMetaConf":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetMetaConf requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetMetaConf(context.Background(), value0))
		fmt.Print("\n")
		break
	case "setMetaConf":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetMetaConf requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SetMetaConf(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "create_catalog":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateCatalog requires 1 args")
			flag.Usage()
		}
		arg958 := flag.Arg(1)
		mbTrans959 := thrift.NewTMemoryBufferLen(len(arg958))
		defer mbTrans959.Close()
		_, err960 := mbTrans959.WriteString(arg958)
		if err960 != nil {
			Usage()
			return
		}
		factory961 := thrift.NewTJSONProtocolFactory()
		jsProt962 := factory961.GetProtocol(mbTrans959)
		argvalue0 := hive_metastore.NewCreateCatalogRequest()
		err963 := argvalue0.Read(context.Background(), jsProt962)
		if err963 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateCatalog(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_catalog":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterCatalog requires 1 args")
			flag.Usage()
		}
		arg964 := flag.Arg(1)
		mbTrans965 := thrift.NewTMemoryBufferLen(len(arg964))
		defer mbTrans965.Close()
		_, err966 := mbTrans965.WriteString(arg964)
		if err966 != nil {
			Usage()
			return
		}
		factory967 := thrift.NewTJSONProtocolFactory()
		jsProt968 := factory967.GetProtocol(mbTrans965)
		argvalue0 := hive_metastore.NewAlterCatalogRequest()
		err969 := argvalue0.Read(context.Background(), jsProt968)
		if err969 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterCatalog(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_catalog":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCatalog requires 1 args")
			flag.Usage()
		}
		arg970 := flag.Arg(1)
		mbTrans971 := thrift.NewTMemoryBufferLen(len(arg970))
		defer mbTrans971.Close()
		_, err972 := mbTrans971.WriteString(arg970)
		if err972 != nil {
			Usage()
			return
		}
		factory973 := thrift.NewTJSONProtocolFactory()
		jsProt974 := factory973.GetProtocol(mbTrans971)
		argvalue0 := hive_metastore.NewGetCatalogRequest()
		err975 := argvalue0.Read(context.Background(), jsProt974)
		if err975 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetCatalog(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_catalogs":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCatalogs requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCatalogs(context.Background()))
		fmt.Print("\n")
		break
	case "drop_catalog":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropCatalog requires 1 args")
			flag.Usage()
		}
		arg976 := flag.Arg(1)
		mbTrans977 := thrift.NewTMemoryBufferLen(len(arg976))
		defer mbTrans977.Close()
		_, err978 := mbTrans977.WriteString(arg976)
		if err978 != nil {
			Usage()
			return
		}
		factory979 := thrift.NewTJSONProtocolFactory()
		jsProt980 := factory979.GetProtocol(mbTrans977)
		argvalue0 := hive_metastore.NewDropCatalogRequest()
		err981 := argvalue0.Read(context.Background(), jsProt980)
		if err981 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropCatalog(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_database":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateDatabase requires 1 args")
			flag.Usage()
		}
		arg982 := flag.Arg(1)
		mbTrans983 := thrift.NewTMemoryBufferLen(len(arg982))
		defer mbTrans983.Close()
		_, err984 := mbTrans983.WriteString(arg982)
		if err984 != nil {
			Usage()
			return
		}
		factory985 := thrift.NewTJSONProtocolFactory()
		jsProt986 := factory985.GetProtocol(mbTrans983)
		argvalue0 := hive_metastore.NewDatabase()
		err987 := argvalue0.Read(context.Background(), jsProt986)
		if err987 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateDatabase(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_database":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabase requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDatabase(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_database_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabaseReq requires 1 args")
			flag.Usage()
		}
		arg989 := flag.Arg(1)
		mbTrans990 := thrift.NewTMemoryBufferLen(len(arg989))
		defer mbTrans990.Close()
		_, err991 := mbTrans990.WriteString(arg989)
		if err991 != nil {
			Usage()
			return
		}
		factory992 := thrift.NewTJSONProtocolFactory()
		jsProt993 := factory992.GetProtocol(mbTrans990)
		argvalue0 := hive_metastore.NewGetDatabaseRequest()
		err994 := argvalue0.Read(context.Background(), jsProt993)
		if err994 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetDatabaseReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_database":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropDatabase requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropDatabase(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_databases":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDatabases requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetDatabases(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_databases":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllDatabases requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllDatabases(context.Background()))
		fmt.Print("\n")
		break
	case "alter_database":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AlterDatabase requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1000 := flag.Arg(2)
		mbTrans1001 := thrift.NewTMemoryBufferLen(len(arg1000))
		defer mbTrans1001.Close()
		_, err1002 := mbTrans1001.WriteString(arg1000)
		if err1002 != nil {
			Usage()
			return
		}
		factory1003 := thrift.NewTJSONProtocolFactory()
		jsProt1004 := factory1003.GetProtocol(mbTrans1001)
		argvalue1 := hive_metastore.NewDatabase()
		err1005 := argvalue1.Read(context.Background(), jsProt1004)
		if err1005 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AlterDatabase(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "create_dataconnector":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateDataconnector requires 1 args")
			flag.Usage()
		}
		arg1006 := flag.Arg(1)
		mbTrans1007 := thrift.NewTMemoryBufferLen(len(arg1006))
		defer mbTrans1007.Close()
		_, err1008 := mbTrans1007.WriteString(arg1006)
		if err1008 != nil {
			Usage()
			return
		}
		factory1009 := thrift.NewTJSONProtocolFactory()
		jsProt1010 := factory1009.GetProtocol(mbTrans1007)
		argvalue0 := hive_metastore.NewDataConnector()
		err1011 := argvalue0.Read(context.Background(), jsProt1010)
		if err1011 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateDataconnector(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_dataconnector_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDataconnectorReq requires 1 args")
			flag.Usage()
		}
		arg1012 := flag.Arg(1)
		mbTrans1013 := thrift.NewTMemoryBufferLen(len(arg1012))
		defer mbTrans1013.Close()
		_, err1014 := mbTrans1013.WriteString(arg1012)
		if err1014 != nil {
			Usage()
			return
		}
		factory1015 := thrift.NewTJSONProtocolFactory()
		jsProt1016 := factory1015.GetProtocol(mbTrans1013)
		argvalue0 := hive_metastore.NewGetDataConnectorRequest()
		err1017 := argvalue0.Read(context.Background(), jsProt1016)
		if err1017 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetDataconnectorReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_dataconnector":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropDataconnector requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropDataconnector(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_dataconnectors":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetDataconnectors requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetDataconnectors(context.Background()))
		fmt.Print("\n")
		break
	case "alter_dataconnector":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AlterDataconnector requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1022 := flag.Arg(2)
		mbTrans1023 := thrift.NewTMemoryBufferLen(len(arg1022))
		defer mbTrans1023.Close()
		_, err1024 := mbTrans1023.WriteString(arg1022)
		if err1024 != nil {
			Usage()
			return
		}
		factory1025 := thrift.NewTJSONProtocolFactory()
		jsProt1026 := factory1025.GetProtocol(mbTrans1023)
		argvalue1 := hive_metastore.NewDataConnector()
		err1027 := argvalue1.Read(context.Background(), jsProt1026)
		if err1027 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AlterDataconnector(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetType requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateType requires 1 args")
			flag.Usage()
		}
		arg1029 := flag.Arg(1)
		mbTrans1030 := thrift.NewTMemoryBufferLen(len(arg1029))
		defer mbTrans1030.Close()
		_, err1031 := mbTrans1030.WriteString(arg1029)
		if err1031 != nil {
			Usage()
			return
		}
		factory1032 := thrift.NewTJSONProtocolFactory()
		jsProt1033 := factory1032.GetProtocol(mbTrans1030)
		argvalue0 := hive_metastore.NewType()
		err1034 := argvalue0.Read(context.Background(), jsProt1033)
		if err1034 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_type":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropType requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_type_all":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTypeAll requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetTypeAll(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_fields":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFields requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFields(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_fields_with_environment_context":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetFieldsWithEnvironmentContext requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1041 := flag.Arg(3)
		mbTrans1042 := thrift.NewTMemoryBufferLen(len(arg1041))
		defer mbTrans1042.Close()
		_, err1043 := mbTrans1042.WriteString(arg1041)
		if err1043 != nil {
			Usage()
			return
		}
		factory1044 := thrift.NewTJSONProtocolFactory()
		jsProt1045 := factory1044.GetProtocol(mbTrans1042)
		argvalue2 := hive_metastore.NewEnvironmentContext()
		err1046 := argvalue2.Read(context.Background(), jsProt1045)
		if err1046 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetFieldsWithEnvironmentContext(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_fields_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFieldsReq requires 1 args")
			flag.Usage()
		}
		arg1047 := flag.Arg(1)
		mbTrans1048 := thrift.NewTMemoryBufferLen(len(arg1047))
		defer mbTrans1048.Close()
		_, err1049 := mbTrans1048.WriteString(arg1047)
		if err1049 != nil {
			Usage()
			return
		}
		factory1050 := thrift.NewTJSONProtocolFactory()
		jsProt1051 := factory1050.GetProtocol(mbTrans1048)
		argvalue0 := hive_metastore.NewGetFieldsRequest()
		err1052 := argvalue0.Read(context.Background(), jsProt1051)
		if err1052 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetFieldsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_schema":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSchema requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetSchema(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_schema_with_environment_context":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetSchemaWithEnvironmentContext requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1057 := flag.Arg(3)
		mbTrans1058 := thrift.NewTMemoryBufferLen(len(arg1057))
		defer mbTrans1058.Close()
		_, err1059 := mbTrans1058.WriteString(arg1057)
		if err1059 != nil {
			Usage()
			return
		}
		factory1060 := thrift.NewTJSONProtocolFactory()
		jsProt1061 := factory1060.GetProtocol(mbTrans1058)
		argvalue2 := hive_metastore.NewEnvironmentContext()
		err1062 := argvalue2.Read(context.Background(), jsProt1061)
		if err1062 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetSchemaWithEnvironmentContext(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_schema_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSchemaReq requires 1 args")
			flag.Usage()
		}
		arg1063 := flag.Arg(1)
		mbTrans1064 := thrift.NewTMemoryBufferLen(len(arg1063))
		defer mbTrans1064.Close()
		_, err1065 := mbTrans1064.WriteString(arg1063)
		if err1065 != nil {
			Usage()
			return
		}
		factory1066 := thrift.NewTJSONProtocolFactory()
		jsProt1067 := factory1066.GetProtocol(mbTrans1064)
		argvalue0 := hive_metastore.NewGetSchemaRequest()
		err1068 := argvalue0.Read(context.Background(), jsProt1067)
		if err1068 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetSchemaReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_table":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateTable requires 1 args")
			flag.Usage()
		}
		arg1069 := flag.Arg(1)
		mbTrans1070 := thrift.NewTMemoryBufferLen(len(arg1069))
		defer mbTrans1070.Close()
		_, err1071 := mbTrans1070.WriteString(arg1069)
		if err1071 != nil {
			Usage()
			return
		}
		factory1072 := thrift.NewTJSONProtocolFactory()
		jsProt1073 := factory1072.GetProtocol(mbTrans1070)
		argvalue0 := hive_metastore.NewTable()
		err1074 := argvalue0.Read(context.Background(), jsProt1073)
		if err1074 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateTable(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_table_with_environment_context":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateTableWithEnvironmentContext requires 2 args")
			flag.Usage()
		}
		arg1075 := flag.Arg(1)
		mbTrans1076 := thrift.NewTMemoryBufferLen(len(arg1075))
		defer mbTrans1076.Close()
		_, err1077 := mbTrans1076.WriteString(arg1075)
		if err1077 != nil {
			Usage()
			return
		}
		factory1078 := thrift.NewTJSONProtocolFactory()
		jsProt1079 := factory1078.GetProtocol(mbTrans1076)
		argvalue0 := hive_metastore.NewTable()
		err1080 := argvalue0.Read(context.Background(), jsProt1079)
		if err1080 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg1081 := flag.Arg(2)
		mbTrans1082 := thrift.NewTMemoryBufferLen(len(arg1081))
		defer mbTrans1082.Close()
		_, err1083 := mbTrans1082.WriteString(arg1081)
		if err1083 != nil {
			Usage()
			return
		}
		factory1084 := thrift.NewTJSONProtocolFactory()
		jsProt1085 := factory1084.GetProtocol(mbTrans1082)
		argvalue1 := hive_metastore.NewEnvironmentContext()
		err1086 := argvalue1.Read(context.Background(), jsProt1085)
		if err1086 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateTableWithEnvironmentContext(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "create_table_with_constraints":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "CreateTableWithConstraints requires 7 args")
			flag.Usage()
		}
		arg1087 := flag.Arg(1)
		mbTrans1088 := thrift.NewTMemoryBufferLen(len(arg1087))
		defer mbTrans1088.Close()
		_, err1089 := mbTrans1088.WriteString(arg1087)
		if err1089 != nil {
			Usage()
			return
		}
		factory1090 := thrift.NewTJSONProtocolFactory()
		jsProt1091 := factory1090.GetProtocol(mbTrans1088)
		argvalue0 := hive_metastore.NewTable()
		err1092 := argvalue0.Read(context.Background(), jsProt1091)
		if err1092 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg1093 := flag.Arg(2)
		mbTrans1094 := thrift.NewTMemoryBufferLen(len(arg1093))
		defer mbTrans1094.Close()
		_, err1095 := mbTrans1094.WriteString(arg1093)
		if err1095 != nil {
			Usage()
			return
		}
		factory1096 := thrift.NewTJSONProtocolFactory()
		jsProt1097 := factory1096.GetProtocol(mbTrans1094)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err1098 := containerStruct1.ReadField2(context.Background(), jsProt1097)
		if err1098 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.PrimaryKeys
		value1 := argvalue1
		arg1099 := flag.Arg(3)
		mbTrans1100 := thrift.NewTMemoryBufferLen(len(arg1099))
		defer mbTrans1100.Close()
		_, err1101 := mbTrans1100.WriteString(arg1099)
		if err1101 != nil {
			Usage()
			return
		}
		factory1102 := thrift.NewTJSONProtocolFactory()
		jsProt1103 := factory1102.GetProtocol(mbTrans1100)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err1104 := containerStruct2.ReadField3(context.Background(), jsProt1103)
		if err1104 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ForeignKeys
		value2 := argvalue2
		arg1105 := flag.Arg(4)
		mbTrans1106 := thrift.NewTMemoryBufferLen(len(arg1105))
		defer mbTrans1106.Close()
		_, err1107 := mbTrans1106.WriteString(arg1105)
		if err1107 != nil {
			Usage()
			return
		}
		factory1108 := thrift.NewTJSONProtocolFactory()
		jsProt1109 := factory1108.GetProtocol(mbTrans1106)
		containerStruct3 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err1110 := containerStruct3.ReadField4(context.Background(), jsProt1109)
		if err1110 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.UniqueConstraints
		value3 := argvalue3
		arg1111 := flag.Arg(5)
		mbTrans1112 := thrift.NewTMemoryBufferLen(len(arg1111))
		defer mbTrans1112.Close()
		_, err1113 := mbTrans1112.WriteString(arg1111)
		if err1113 != nil {
			Usage()
			return
		}
		factory1114 := thrift.NewTJSONProtocolFactory()
		jsProt1115 := factory1114.GetProtocol(mbTrans1112)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err1116 := containerStruct4.ReadField5(context.Background(), jsProt1115)
		if err1116 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.NotNullConstraints
		value4 := argvalue4
		arg1117 := flag.Arg(6)
		mbTrans1118 := thrift.NewTMemoryBufferLen(len(arg1117))
		defer mbTrans1118.Close()
		_, err1119 := mbTrans1118.WriteString(arg1117)
		if err1119 != nil {
			Usage()
			return
		}
		factory1120 := thrift.NewTJSONProtocolFactory()
		jsProt1121 := factory1120.GetProtocol(mbTrans1118)
		containerStruct5 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err1122 := containerStruct5.ReadField6(context.Background(), jsProt1121)
		if err1122 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.DefaultConstraints
		value5 := argvalue5
		arg1123 := flag.Arg(7)
		mbTrans1124 := thrift.NewTMemoryBufferLen(len(arg1123))
		defer mbTrans1124.Close()
		_, err1125 := mbTrans1124.WriteString(arg1123)
		if err1125 != nil {
			Usage()
			return
		}
		factory1126 := thrift.NewTJSONProtocolFactory()
		jsProt1127 := factory1126.GetProtocol(mbTrans1124)
		containerStruct6 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
		err1128 := containerStruct6.ReadField7(context.Background(), jsProt1127)
		if err1128 != nil {
			Usage()
			return
		}
		argvalue6 := containerStruct6.CheckConstraints
		value6 := argvalue6
		fmt.Print(client.CreateTableWithConstraints(context.Background(), value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "create_table_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateTableReq requires 1 args")
			flag.Usage()
		}
		arg1129 := flag.Arg(1)
		mbTrans1130 := thrift.NewTMemoryBufferLen(len(arg1129))
		defer mbTrans1130.Close()
		_, err1131 := mbTrans1130.WriteString(arg1129)
		if err1131 != nil {
			Usage()
			return
		}
		factory1132 := thrift.NewTJSONProtocolFactory()
		jsProt1133 := factory1132.GetProtocol(mbTrans1130)
		argvalue0 := hive_metastore.NewCreateTableRequest()
		err1134 := argvalue0.Read(context.Background(), jsProt1133)
		if err1134 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateTableReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropConstraint requires 1 args")
			flag.Usage()
		}
		arg1135 := flag.Arg(1)
		mbTrans1136 := thrift.NewTMemoryBufferLen(len(arg1135))
		defer mbTrans1136.Close()
		_, err1137 := mbTrans1136.WriteString(arg1135)
		if err1137 != nil {
			Usage()
			return
		}
		factory1138 := thrift.NewTJSONProtocolFactory()
		jsProt1139 := factory1138.GetProtocol(mbTrans1136)
		argvalue0 := hive_metastore.NewDropConstraintRequest()
		err1140 := argvalue0.Read(context.Background(), jsProt1139)
		if err1140 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_primary_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPrimaryKey requires 1 args")
			flag.Usage()
		}
		arg1141 := flag.Arg(1)
		mbTrans1142 := thrift.NewTMemoryBufferLen(len(arg1141))
		defer mbTrans1142.Close()
		_, err1143 := mbTrans1142.WriteString(arg1141)
		if err1143 != nil {
			Usage()
			return
		}
		factory1144 := thrift.NewTJSONProtocolFactory()
		jsProt1145 := factory1144.GetProtocol(mbTrans1142)
		argvalue0 := hive_metastore.NewAddPrimaryKeyRequest()
		err1146 := argvalue0.Read(context.Background(), jsProt1145)
		if err1146 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPrimaryKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_foreign_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddForeignKey requires 1 args")
			flag.Usage()
		}
		arg1147 := flag.Arg(1)
		mbTrans1148 := thrift.NewTMemoryBufferLen(len(arg1147))
		defer mbTrans1148.Close()
		_, err1149 := mbTrans1148.WriteString(arg1147)
		if err1149 != nil {
			Usage()
			return
		}
		factory1150 := thrift.NewTJSONProtocolFactory()
		jsProt1151 := factory1150.GetProtocol(mbTrans1148)
		argvalue0 := hive_metastore.NewAddForeignKeyRequest()
		err1152 := argvalue0.Read(context.Background(), jsProt1151)
		if err1152 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddForeignKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_unique_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddUniqueConstraint requires 1 args")
			flag.Usage()
		}
		arg1153 := flag.Arg(1)
		mbTrans1154 := thrift.NewTMemoryBufferLen(len(arg1153))
		defer mbTrans1154.Close()
		_, err1155 := mbTrans1154.WriteString(arg1153)
		if err1155 != nil {
			Usage()
			return
		}
		factory1156 := thrift.NewTJSONProtocolFactory()
		jsProt1157 := factory1156.GetProtocol(mbTrans1154)
		argvalue0 := hive_metastore.NewAddUniqueConstraintRequest()
		err1158 := argvalue0.Read(context.Background(), jsProt1157)
		if err1158 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddUniqueConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_not_null_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddNotNullConstraint requires 1 args")
			flag.Usage()
		}
		arg1159 := flag.Arg(1)
		mbTrans1160 := thrift.NewTMemoryBufferLen(len(arg1159))
		defer mbTrans1160.Close()
		_, err1161 := mbTrans1160.WriteString(arg1159)
		if err1161 != nil {
			Usage()
			return
		}
		factory1162 := thrift.NewTJSONProtocolFactory()
		jsProt1163 := factory1162.GetProtocol(mbTrans1160)
		argvalue0 := hive_metastore.NewAddNotNullConstraintRequest()
		err1164 := argvalue0.Read(context.Background(), jsProt1163)
		if err1164 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddNotNullConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_default_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddDefaultConstraint requires 1 args")
			flag.Usage()
		}
		arg1165 := flag.Arg(1)
		mbTrans1166 := thrift.NewTMemoryBufferLen(len(arg1165))
		defer mbTrans1166.Close()
		_, err1167 := mbTrans1166.WriteString(arg1165)
		if err1167 != nil {
			Usage()
			return
		}
		factory1168 := thrift.NewTJSONProtocolFactory()
		jsProt1169 := factory1168.GetProtocol(mbTrans1166)
		argvalue0 := hive_metastore.NewAddDefaultConstraintRequest()
		err1170 := argvalue0.Read(context.Background(), jsProt1169)
		if err1170 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddDefaultConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_check_constraint":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddCheckConstraint requires 1 args")
			flag.Usage()
		}
		arg1171 := flag.Arg(1)
		mbTrans1172 := thrift.NewTMemoryBufferLen(len(arg1171))
		defer mbTrans1172.Close()
		_, err1173 := mbTrans1172.WriteString(arg1171)
		if err1173 != nil {
			Usage()
			return
		}
		factory1174 := thrift.NewTJSONProtocolFactory()
		jsProt1175 := factory1174.GetProtocol(mbTrans1172)
		argvalue0 := hive_metastore.NewAddCheckConstraintRequest()
		err1176 := argvalue0.Read(context.Background(), jsProt1175)
		if err1176 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddCheckConstraint(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DropTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		fmt.Print(client.DropTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "drop_table_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropTableWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3) == "true"
		value2 := argvalue2
		arg1183 := flag.Arg(4)
		mbTrans1184 := thrift.NewTMemoryBufferLen(len(arg1183))
		defer mbTrans1184.Close()
		_, err1185 := mbTrans1184.WriteString(arg1183)
		if err1185 != nil {
			Usage()
			return
		}
		factory1186 := thrift.NewTJSONProtocolFactory()
		jsProt1187 := factory1186.GetProtocol(mbTrans1184)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1188 := argvalue3.Read(context.Background(), jsProt1187)
		if err1188 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.DropTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "truncate_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "TruncateTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1191 := flag.Arg(3)
		mbTrans1192 := thrift.NewTMemoryBufferLen(len(arg1191))
		defer mbTrans1192.Close()
		_, err1193 := mbTrans1192.WriteString(arg1191)
		if err1193 != nil {
			Usage()
			return
		}
		factory1194 := thrift.NewTJSONProtocolFactory()
		jsProt1195 := factory1194.GetProtocol(mbTrans1192)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreTruncateTableArgs()
		err1196 := containerStruct2.ReadField3(context.Background(), jsProt1195)
		if err1196 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartNames
		value2 := argvalue2
		fmt.Print(client.TruncateTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "truncate_table_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "TruncateTableReq requires 1 args")
			flag.Usage()
		}
		arg1197 := flag.Arg(1)
		mbTrans1198 := thrift.NewTMemoryBufferLen(len(arg1197))
		defer mbTrans1198.Close()
		_, err1199 := mbTrans1198.WriteString(arg1197)
		if err1199 != nil {
			Usage()
			return
		}
		factory1200 := thrift.NewTJSONProtocolFactory()
		jsProt1201 := factory1200.GetProtocol(mbTrans1198)
		argvalue0 := hive_metastore.NewTruncateTableRequest()
		err1202 := argvalue0.Read(context.Background(), jsProt1201)
		if err1202 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.TruncateTableReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_tables":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTables(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_tables_by_type":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTablesByType requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetTablesByType(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_all_materialized_view_objects_for_rewriting":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllMaterializedViewObjectsForRewriting requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllMaterializedViewObjectsForRewriting(context.Background()))
		fmt.Print("\n")
		break
	case "get_materialized_views_for_rewriting":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetMaterializedViewsForRewriting requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetMaterializedViewsForRewriting(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_meta":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableMeta requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1211 := flag.Arg(3)
		mbTrans1212 := thrift.NewTMemoryBufferLen(len(arg1211))
		defer mbTrans1212.Close()
		_, err1213 := mbTrans1212.WriteString(arg1211)
		if err1213 != nil {
			Usage()
			return
		}
		factory1214 := thrift.NewTJSONProtocolFactory()
		jsProt1215 := factory1214.GetProtocol(mbTrans1212)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetTableMetaArgs()
		err1216 := containerStruct2.ReadField3(context.Background(), jsProt1215)
		if err1216 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.TblTypes
		value2 := argvalue2
		fmt.Print(client.GetTableMeta(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_all_tables":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllTables requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetAllTables(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTable requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetTable(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_table_objects_by_name":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetTableObjectsByName requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1221 := flag.Arg(2)
		mbTrans1222 := thrift.NewTMemoryBufferLen(len(arg1221))
		defer mbTrans1222.Close()
		_, err1223 := mbTrans1222.WriteString(arg1221)
		if err1223 != nil {
			Usage()
			return
		}
		factory1224 := thrift.NewTJSONProtocolFactory()
		jsProt1225 := factory1224.GetProtocol(mbTrans1222)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreGetTableObjectsByNameArgs()
		err1226 := containerStruct1.ReadField2(context.Background(), jsProt1225)
		if err1226 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.TblNames
		value1 := argvalue1
		fmt.Print(client.GetTableObjectsByName(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_tables_ext":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTablesExt requires 1 args")
			flag.Usage()
		}
		arg1227 := flag.Arg(1)
		mbTrans1228 := thrift.NewTMemoryBufferLen(len(arg1227))
		defer mbTrans1228.Close()
		_, err1229 := mbTrans1228.WriteString(arg1227)
		if err1229 != nil {
			Usage()
			return
		}
		factory1230 := thrift.NewTJSONProtocolFactory()
		jsProt1231 := factory1230.GetProtocol(mbTrans1228)
		argvalue0 := hive_metastore.NewGetTablesExtRequest()
		err1232 := argvalue0.Read(context.Background(), jsProt1231)
		if err1232 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTablesExt(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableReq requires 1 args")
			flag.Usage()
		}
		arg1233 := flag.Arg(1)
		mbTrans1234 := thrift.NewTMemoryBufferLen(len(arg1233))
		defer mbTrans1234.Close()
		_, err1235 := mbTrans1234.WriteString(arg1233)
		if err1235 != nil {
			Usage()
			return
		}
		factory1236 := thrift.NewTJSONProtocolFactory()
		jsProt1237 := factory1236.GetProtocol(mbTrans1234)
		argvalue0 := hive_metastore.NewGetTableRequest()
		err1238 := argvalue0.Read(context.Background(), jsProt1237)
		if err1238 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_objects_by_name_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableObjectsByNameReq requires 1 args")
			flag.Usage()
		}
		arg1239 := flag.Arg(1)
		mbTrans1240 := thrift.NewTMemoryBufferLen(len(arg1239))
		defer mbTrans1240.Close()
		_, err1241 := mbTrans1240.WriteString(arg1239)
		if err1241 != nil {
			Usage()
			return
		}
		factory1242 := thrift.NewTJSONProtocolFactory()
		jsProt1243 := factory1242.GetProtocol(mbTrans1240)
		argvalue0 := hive_metastore.NewGetTablesRequest()
		err1244 := argvalue0.Read(context.Background(), jsProt1243)
		if err1244 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableObjectsByNameReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_materialization_invalidation_info":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetMaterializationInvalidationInfo requires 2 args")
			flag.Usage()
		}
		arg1245 := flag.Arg(1)
		mbTrans1246 := thrift.NewTMemoryBufferLen(len(arg1245))
		defer mbTrans1246.Close()
		_, err1247 := mbTrans1246.WriteString(arg1245)
		if err1247 != nil {
			Usage()
			return
		}
		factory1248 := thrift.NewTJSONProtocolFactory()
		jsProt1249 := factory1248.GetProtocol(mbTrans1246)
		argvalue0 := hive_metastore.NewCreationMetadata()
		err1250 := argvalue0.Read(context.Background(), jsProt1249)
		if err1250 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetMaterializationInvalidationInfo(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "update_creation_metadata":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "UpdateCreationMetadata requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg1255 := flag.Arg(4)
		mbTrans1256 := thrift.NewTMemoryBufferLen(len(arg1255))
		defer mbTrans1256.Close()
		_, err1257 := mbTrans1256.WriteString(arg1255)
		if err1257 != nil {
			Usage()
			return
		}
		factory1258 := thrift.NewTJSONProtocolFactory()
		jsProt1259 := factory1258.GetProtocol(mbTrans1256)
		argvalue3 := hive_metastore.NewCreationMetadata()
		err1260 := argvalue3.Read(context.Background(), jsProt1259)
		if err1260 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.UpdateCreationMetadata(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_table_names_by_filter":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableNamesByFilter requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1263 := (strconv.Atoi(flag.Arg(3)))
		if err1263 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetTableNamesByFilter(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_table":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1266 := flag.Arg(3)
		mbTrans1267 := thrift.NewTMemoryBufferLen(len(arg1266))
		defer mbTrans1267.Close()
		_, err1268 := mbTrans1267.WriteString(arg1266)
		if err1268 != nil {
			Usage()
			return
		}
		factory1269 := thrift.NewTJSONProtocolFactory()
		jsProt1270 := factory1269.GetProtocol(mbTrans1267)
		argvalue2 := hive_metastore.NewTable()
		err1271 := argvalue2.Read(context.Background(), jsProt1270)
		if err1271 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterTable(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_table_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterTableWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1274 := flag.Arg(3)
		mbTrans1275 := thrift.NewTMemoryBufferLen(len(arg1274))
		defer mbTrans1275.Close()
		_, err1276 := mbTrans1275.WriteString(arg1274)
		if err1276 != nil {
			Usage()
			return
		}
		factory1277 := thrift.NewTJSONProtocolFactory()
		jsProt1278 := factory1277.GetProtocol(mbTrans1275)
		argvalue2 := hive_metastore.NewTable()
		err1279 := argvalue2.Read(context.Background(), jsProt1278)
		if err1279 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg1280 := flag.Arg(4)
		mbTrans1281 := thrift.NewTMemoryBufferLen(len(arg1280))
		defer mbTrans1281.Close()
		_, err1282 := mbTrans1281.WriteString(arg1280)
		if err1282 != nil {
			Usage()
			return
		}
		factory1283 := thrift.NewTJSONProtocolFactory()
		jsProt1284 := factory1283.GetProtocol(mbTrans1281)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1285 := argvalue3.Read(context.Background(), jsProt1284)
		if err1285 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "alter_table_with_cascade":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterTableWithCascade requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1288 := flag.Arg(3)
		mbTrans1289 := thrift.NewTMemoryBufferLen(len(arg1288))
		defer mbTrans1289.Close()
		_, err1290 := mbTrans1289.WriteString(arg1288)
		if err1290 != nil {
			Usage()
			return
		}
		factory1291 := thrift.NewTJSONProtocolFactory()
		jsProt1292 := factory1291.GetProtocol(mbTrans1289)
		argvalue2 := hive_metastore.NewTable()
		err1293 := argvalue2.Read(context.Background(), jsProt1292)
		if err1293 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.AlterTableWithCascade(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "alter_table_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterTableReq requires 1 args")
			flag.Usage()
		}
		arg1295 := flag.Arg(1)
		mbTrans1296 := thrift.NewTMemoryBufferLen(len(arg1295))
		defer mbTrans1296.Close()
		_, err1297 := mbTrans1296.WriteString(arg1295)
		if err1297 != nil {
			Usage()
			return
		}
		factory1298 := thrift.NewTJSONProtocolFactory()
		jsProt1299 := factory1298.GetProtocol(mbTrans1296)
		argvalue0 := hive_metastore.NewAlterTableRequest()
		err1300 := argvalue0.Read(context.Background(), jsProt1299)
		if err1300 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterTableReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_partition":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartition requires 1 args")
			flag.Usage()
		}
		arg1301 := flag.Arg(1)
		mbTrans1302 := thrift.NewTMemoryBufferLen(len(arg1301))
		defer mbTrans1302.Close()
		_, err1303 := mbTrans1302.WriteString(arg1301)
		if err1303 != nil {
			Usage()
			return
		}
		factory1304 := thrift.NewTJSONProtocolFactory()
		jsProt1305 := factory1304.GetProtocol(mbTrans1302)
		argvalue0 := hive_metastore.NewPartition()
		err1306 := argvalue0.Read(context.Background(), jsProt1305)
		if err1306 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPartition(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_partition_with_environment_context":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddPartitionWithEnvironmentContext requires 2 args")
			flag.Usage()
		}
		arg1307 := flag.Arg(1)
		mbTrans1308 := thrift.NewTMemoryBufferLen(len(arg1307))
		defer mbTrans1308.Close()
		_, err1309 := mbTrans1308.WriteString(arg1307)
		if err1309 != nil {
			Usage()
			return
		}
		factory1310 := thrift.NewTJSONProtocolFactory()
		jsProt1311 := factory1310.GetProtocol(mbTrans1308)
		argvalue0 := hive_metastore.NewPartition()
		err1312 := argvalue0.Read(context.Background(), jsProt1311)
		if err1312 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg1313 := flag.Arg(2)
		mbTrans1314 := thrift.NewTMemoryBufferLen(len(arg1313))
		defer mbTrans1314.Close()
		_, err1315 := mbTrans1314.WriteString(arg1313)
		if err1315 != nil {
			Usage()
			return
		}
		factory1316 := thrift.NewTJSONProtocolFactory()
		jsProt1317 := factory1316.GetProtocol(mbTrans1314)
		argvalue1 := hive_metastore.NewEnvironmentContext()
		err1318 := argvalue1.Read(context.Background(), jsProt1317)
		if err1318 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.AddPartitionWithEnvironmentContext(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "add_partitions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitions requires 1 args")
			flag.Usage()
		}
		arg1319 := flag.Arg(1)
		mbTrans1320 := thrift.NewTMemoryBufferLen(len(arg1319))
		defer mbTrans1320.Close()
		_, err1321 := mbTrans1320.WriteString(arg1319)
		if err1321 != nil {
			Usage()
			return
		}
		factory1322 := thrift.NewTJSONProtocolFactory()
		jsProt1323 := factory1322.GetProtocol(mbTrans1320)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsArgs()
		err1324 := containerStruct0.ReadField1(context.Background(), jsProt1323)
		if err1324 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.NewParts_
		value0 := argvalue0
		fmt.Print(client.AddPartitions(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_partitions_pspec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitionsPspec requires 1 args")
			flag.Usage()
		}
		arg1325 := flag.Arg(1)
		mbTrans1326 := thrift.NewTMemoryBufferLen(len(arg1325))
		defer mbTrans1326.Close()
		_, err1327 := mbTrans1326.WriteString(arg1325)
		if err1327 != nil {
			Usage()
			return
		}
		factory1328 := thrift.NewTJSONProtocolFactory()
		jsProt1329 := factory1328.GetProtocol(mbTrans1326)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsPspecArgs()
		err1330 := containerStruct0.ReadField1(context.Background(), jsProt1329)
		if err1330 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.NewParts_
		value0 := argvalue0
		fmt.Print(client.AddPartitionsPspec(context.Background(), value0))
		fmt.Print("\n")
		break
	case "append_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AppendPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1333 := flag.Arg(3)
		mbTrans1334 := thrift.NewTMemoryBufferLen(len(arg1333))
		defer mbTrans1334.Close()
		_, err1335 := mbTrans1334.WriteString(arg1333)
		if err1335 != nil {
			Usage()
			return
		}
		factory1336 := thrift.NewTJSONProtocolFactory()
		jsProt1337 := factory1336.GetProtocol(mbTrans1334)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionArgs()
		err1338 := containerStruct2.ReadField3(context.Background(), jsProt1337)
		if err1338 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		fmt.Print(client.AppendPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "add_partitions_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPartitionsReq requires 1 args")
			flag.Usage()
		}
		arg1339 := flag.Arg(1)
		mbTrans1340 := thrift.NewTMemoryBufferLen(len(arg1339))
		defer mbTrans1340.Close()
		_, err1341 := mbTrans1340.WriteString(arg1339)
		if err1341 != nil {
			Usage()
			return
		}
		factory1342 := thrift.NewTJSONProtocolFactory()
		jsProt1343 := factory1342.GetProtocol(mbTrans1340)
		argvalue0 := hive_metastore.NewAddPartitionsRequest()
		err1344 := argvalue0.Read(context.Background(), jsProt1343)
		if err1344 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPartitionsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "append_partition_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AppendPartitionWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1347 := flag.Arg(3)
		mbTrans1348 := thrift.NewTMemoryBufferLen(len(arg1347))
		defer mbTrans1348.Close()
		_, err1349 := mbTrans1348.WriteString(arg1347)
		if err1349 != nil {
			Usage()
			return
		}
		factory1350 := thrift.NewTJSONProtocolFactory()
		jsProt1351 := factory1350.GetProtocol(mbTrans1348)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs()
		err1352 := containerStruct2.ReadField3(context.Background(), jsProt1351)
		if err1352 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		arg1353 := flag.Arg(4)
		mbTrans1354 := thrift.NewTMemoryBufferLen(len(arg1353))
		defer mbTrans1354.Close()
		_, err1355 := mbTrans1354.WriteString(arg1353)
		if err1355 != nil {
			Usage()
			return
		}
		factory1356 := thrift.NewTJSONProtocolFactory()
		jsProt1357 := factory1356.GetProtocol(mbTrans1354)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1358 := argvalue3.Read(context.Background(), jsProt1357)
		if err1358 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AppendPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "append_partition_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AppendPartitionByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.AppendPartitionByName(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "append_partition_by_name_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AppendPartitionByNameWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		arg1365 := flag.Arg(4)
		mbTrans1366 := thrift.NewTMemoryBufferLen(len(arg1365))
		defer mbTrans1366.Close()
		_, err1367 := mbTrans1366.WriteString(arg1365)
		if err1367 != nil {
			Usage()
			return
		}
		factory1368 := thrift.NewTJSONProtocolFactory()
		jsProt1369 := factory1368.GetProtocol(mbTrans1366)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1370 := argvalue3.Read(context.Background(), jsProt1369)
		if err1370 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AppendPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropPartition requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1373 := flag.Arg(3)
		mbTrans1374 := thrift.NewTMemoryBufferLen(len(arg1373))
		defer mbTrans1374.Close()
		_, err1375 := mbTrans1374.WriteString(arg1373)
		if err1375 != nil {
			Usage()
			return
		}
		factory1376 := thrift.NewTJSONProtocolFactory()
		jsProt1377 := factory1376.GetProtocol(mbTrans1374)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionArgs()
		err1378 := containerStruct2.ReadField3(context.Background(), jsProt1377)
		if err1378 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropPartition(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition_with_environment_context":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DropPartitionWithEnvironmentContext requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1382 := flag.Arg(3)
		mbTrans1383 := thrift.NewTMemoryBufferLen(len(arg1382))
		defer mbTrans1383.Close()
		_, err1384 := mbTrans1383.WriteString(arg1382)
		if err1384 != nil {
			Usage()
			return
		}
		factory1385 := thrift.NewTJSONProtocolFactory()
		jsProt1386 := factory1385.GetProtocol(mbTrans1383)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs()
		err1387 := containerStruct2.ReadField3(context.Background(), jsProt1386)
		if err1387 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		arg1389 := flag.Arg(5)
		mbTrans1390 := thrift.NewTMemoryBufferLen(len(arg1389))
		defer mbTrans1390.Close()
		_, err1391 := mbTrans1390.WriteString(arg1389)
		if err1391 != nil {
			Usage()
			return
		}
		factory1392 := thrift.NewTJSONProtocolFactory()
		jsProt1393 := factory1392.GetProtocol(mbTrans1390)
		argvalue4 := hive_metastore.NewEnvironmentContext()
		err1394 := argvalue4.Read(context.Background(), jsProt1393)
		if err1394 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.DropPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_partition_by_name":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DropPartitionByName requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		fmt.Print(client.DropPartitionByName(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "drop_partition_by_name_with_environment_context":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DropPartitionByNameWithEnvironmentContext requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4) == "true"
		value3 := argvalue3
		arg1403 := flag.Arg(5)
		mbTrans1404 := thrift.NewTMemoryBufferLen(len(arg1403))
		defer mbTrans1404.Close()
		_, err1405 := mbTrans1404.WriteString(arg1403)
		if err1405 != nil {
			Usage()
			return
		}
		factory1406 := thrift.NewTJSONProtocolFactory()
		jsProt1407 := factory1406.GetProtocol(mbTrans1404)
		argvalue4 := hive_metastore.NewEnvironmentContext()
		err1408 := argvalue4.Read(context.Background(), jsProt1407)
		if err1408 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		fmt.Print(client.DropPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "drop_partitions_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropPartitionsReq requires 1 args")
			flag.Usage()
		}
		arg1409 := flag.Arg(1)
		mbTrans1410 := thrift.NewTMemoryBufferLen(len(arg1409))
		defer mbTrans1410.Close()
		_, err1411 := mbTrans1410.WriteString(arg1409)
		if err1411 != nil {
			Usage()
			return
		}
		factory1412 := thrift.NewTJSONProtocolFactory()
		jsProt1413 := factory1412.GetProtocol(mbTrans1410)
		argvalue0 := hive_metastore.NewDropPartitionsRequest()
		err1414 := argvalue0.Read(context.Background(), jsProt1413)
		if err1414 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropPartitionsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1417 := flag.Arg(3)
		mbTrans1418 := thrift.NewTMemoryBufferLen(len(arg1417))
		defer mbTrans1418.Close()
		_, err1419 := mbTrans1418.WriteString(arg1417)
		if err1419 != nil {
			Usage()
			return
		}
		factory1420 := thrift.NewTJSONProtocolFactory()
		jsProt1421 := factory1420.GetProtocol(mbTrans1418)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionArgs()
		err1422 := containerStruct2.ReadField3(context.Background(), jsProt1421)
		if err1422 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		fmt.Print(client.GetPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionReq requires 1 args")
			flag.Usage()
		}
		arg1423 := flag.Arg(1)
		mbTrans1424 := thrift.NewTMemoryBufferLen(len(arg1423))
		defer mbTrans1424.Close()
		_, err1425 := mbTrans1424.WriteString(arg1423)
		if err1425 != nil {
			Usage()
			return
		}
		factory1426 := thrift.NewTJSONProtocolFactory()
		jsProt1427 := factory1426.GetProtocol(mbTrans1424)
		argvalue0 := hive_metastore.NewGetPartitionRequest()
		err1428 := argvalue0.Read(context.Background(), jsProt1427)
		if err1428 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "exchange_partition":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ExchangePartition requires 5 args")
			flag.Usage()
		}
		arg1429 := flag.Arg(1)
		mbTrans1430 := thrift.NewTMemoryBufferLen(len(arg1429))
		defer mbTrans1430.Close()
		_, err1431 := mbTrans1430.WriteString(arg1429)
		if err1431 != nil {
			Usage()
			return
		}
		factory1432 := thrift.NewTJSONProtocolFactory()
		jsProt1433 := factory1432.GetProtocol(mbTrans1430)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionArgs()
		err1434 := containerStruct0.ReadField1(context.Background(), jsProt1433)
		if err1434 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartitionSpecs
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.ExchangePartition(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "exchange_partitions":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ExchangePartitions requires 5 args")
			flag.Usage()
		}
		arg1439 := flag.Arg(1)
		mbTrans1440 := thrift.NewTMemoryBufferLen(len(arg1439))
		defer mbTrans1440.Close()
		_, err1441 := mbTrans1440.WriteString(arg1439)
		if err1441 != nil {
			Usage()
			return
		}
		factory1442 := thrift.NewTJSONProtocolFactory()
		jsProt1443 := factory1442.GetProtocol(mbTrans1440)
		containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionsArgs()
		err1444 := containerStruct0.ReadField1(context.Background(), jsProt1443)
		if err1444 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartitionSpecs
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.ExchangePartitions(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_with_auth":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetPartitionWithAuth requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1451 := flag.Arg(3)
		mbTrans1452 := thrift.NewTMemoryBufferLen(len(arg1451))
		defer mbTrans1452.Close()
		_, err1453 := mbTrans1452.WriteString(arg1451)
		if err1453 != nil {
			Usage()
			return
		}
		factory1454 := thrift.NewTJSONProtocolFactory()
		jsProt1455 := factory1454.GetProtocol(mbTrans1452)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
		err1456 := containerStruct2.ReadField3(context.Background(), jsProt1455)
		if err1456 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg1458 := flag.Arg(5)
		mbTrans1459 := thrift.NewTMemoryBufferLen(len(arg1458))
		defer mbTrans1459.Close()
		_, err1460 := mbTrans1459.WriteString(arg1458)
		if err1460 != nil {
			Usage()
			return
		}
		factory1461 := thrift.NewTJSONProtocolFactory()
		jsProt1462 := factory1461.GetProtocol(mbTrans1459)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
		err1463 := containerStruct4.ReadField5(context.Background(), jsProt1462)
		if err1463 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.GroupNames
		value4 := argvalue4
		fmt.Print(client.GetPartitionWithAuth(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partition_by_name":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionByName requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetPartitionByName(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitions requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1469 := (strconv.Atoi(flag.Arg(3)))
		if err1469 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitions(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsReq requires 1 args")
			flag.Usage()
		}
		arg1470 := flag.Arg(1)
		mbTrans1471 := thrift.NewTMemoryBufferLen(len(arg1470))
		defer mbTrans1471.Close()
		_, err1472 := mbTrans1471.WriteString(arg1470)
		if err1472 != nil {
			Usage()
			return
		}
		factory1473 := thrift.NewTJSONProtocolFactory()
		jsProt1474 := factory1473.GetProtocol(mbTrans1471)
		argvalue0 := hive_metastore.NewPartitionsRequest()
		err1475 := argvalue0.Read(context.Background(), jsProt1474)
		if err1475 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partitions_with_auth":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetPartitionsWithAuth requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1478 := (strconv.Atoi(flag.Arg(3)))
		if err1478 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		arg1480 := flag.Arg(5)
		mbTrans1481 := thrift.NewTMemoryBufferLen(len(arg1480))
		defer mbTrans1481.Close()
		_, err1482 := mbTrans1481.WriteString(arg1480)
		if err1482 != nil {
			Usage()
			return
		}
		factory1483 := thrift.NewTJSONProtocolFactory()
		jsProt1484 := factory1483.GetProtocol(mbTrans1481)
		containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionsWithAuthArgs()
		err1485 := containerStruct4.ReadField5(context.Background(), jsProt1484)
		if err1485 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.GroupNames
		value4 := argvalue4
		fmt.Print(client.GetPartitionsWithAuth(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_partitions_pspec":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPspec requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1488 := (strconv.Atoi(flag.Arg(3)))
		if err1488 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitionsPspec(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err1491 := (strconv.Atoi(flag.Arg(3)))
		if err1491 != nil {
			Usage()
			return
		}
		argvalue2 := int16(tmp2)
		value2 := argvalue2
		fmt.Print(client.GetPartitionNames(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_values":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionValues requires 1 args")
			flag.Usage()
		}
		arg1492 := flag.Arg(1)
		mbTrans1493 := thrift.NewTMemoryBufferLen(len(arg1492))
		defer mbTrans1493.Close()
		_, err1494 := mbTrans1493.WriteString(arg1492)
		if err1494 != nil {
			Usage()
			return
		}
		factory1495 := thrift.NewTJSONProtocolFactory()
		jsProt1496 := factory1495.GetProtocol(mbTrans1493)
		argvalue0 := hive_metastore.NewPartitionValuesRequest()
		err1497 := argvalue0.Read(context.Background(), jsProt1496)
		if err1497 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionValues(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partitions_ps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1500 := flag.Arg(3)
		mbTrans1501 := thrift.NewTMemoryBufferLen(len(arg1500))
		defer mbTrans1501.Close()
		_, err1502 := mbTrans1501.WriteString(arg1500)
		if err1502 != nil {
			Usage()
			return
		}
		factory1503 := thrift.NewTJSONProtocolFactory()
		jsProt1504 := factory1503.GetProtocol(mbTrans1501)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsArgs()
		err1505 := containerStruct2.ReadField3(context.Background(), jsProt1504)
		if err1505 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err1506 := (strconv.Atoi(flag.Arg(4)))
		if err1506 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionsPs(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_ps_with_auth":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuth requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1509 := flag.Arg(3)
		mbTrans1510 := thrift.NewTMemoryBufferLen(len(arg1509))
		defer mbTrans1510.Close()
		_, err1511 := mbTrans1510.WriteString(arg1509)
		if err1511 != nil {
			Usage()
			return
		}
		factory1512 := thrift.NewTJSONProtocolFactory()
		jsProt1513 := factory1512.GetProtocol(mbTrans1510)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
		err1514 := containerStruct2.ReadField3(context.Background(), jsProt1513)
		if err1514 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err1515 := (strconv.Atoi(flag.Arg(4)))
		if err1515 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		arg1517 := flag.Arg(6)
		mbTrans1518 := thrift.NewTMemoryBufferLen(len(arg1517))
		defer mbTrans1518.Close()
		_, err1519 := mbTrans1518.WriteString(arg1517)
		if err1519 != nil {
			Usage()
			return
		}
		factory1520 := thrift.NewTJSONProtocolFactory()
		jsProt1521 := factory1520.GetProtocol(mbTrans1518)
		containerStruct5 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
		err1522 := containerStruct5.ReadField6(context.Background(), jsProt1521)
		if err1522 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.GroupNames
		value5 := argvalue5
		fmt.Print(client.GetPartitionsPsWithAuth(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "get_partitions_ps_with_auth_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuthReq requires 1 args")
			flag.Usage()
		}
		arg1523 := flag.Arg(1)
		mbTrans1524 := thrift.NewTMemoryBufferLen(len(arg1523))
		defer mbTrans1524.Close()
		_, err1525 := mbTrans1524.WriteString(arg1523)
		if err1525 != nil {
			Usage()
			return
		}
		factory1526 := thrift.NewTJSONProtocolFactory()
		jsProt1527 := factory1526.GetProtocol(mbTrans1524)
		argvalue0 := hive_metastore.NewGetPartitionsPsWithAuthRequest()
		err1528 := argvalue0.Read(context.Background(), jsProt1527)
		if err1528 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsPsWithAuthReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partition_names_ps":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionNamesPs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1531 := flag.Arg(3)
		mbTrans1532 := thrift.NewTMemoryBufferLen(len(arg1531))
		defer mbTrans1532.Close()
		_, err1533 := mbTrans1532.WriteString(arg1531)
		if err1533 != nil {
			Usage()
			return
		}
		factory1534 := thrift.NewTJSONProtocolFactory()
		jsProt1535 := factory1534.GetProtocol(mbTrans1532)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionNamesPsArgs()
		err1536 := containerStruct2.ReadField3(context.Background(), jsProt1535)
		if err1536 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err1537 := (strconv.Atoi(flag.Arg(4)))
		if err1537 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionNamesPs(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partition_names_ps_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionNamesPsReq requires 1 args")
			flag.Usage()
		}
		arg1538 := flag.Arg(1)
		mbTrans1539 := thrift.NewTMemoryBufferLen(len(arg1538))
		defer mbTrans1539.Close()
		_, err1540 := mbTrans1539.WriteString(arg1538)
		if err1540 != nil {
			Usage()
			return
		}
		factory1541 := thrift.NewTJSONProtocolFactory()
		jsProt1542 := factory1541.GetProtocol(mbTrans1539)
		argvalue0 := hive_metastore.NewGetPartitionNamesPsRequest()
		err1543 := argvalue0.Read(context.Background(), jsProt1542)
		if err1543 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionNamesPsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partition_names_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionNamesReq requires 1 args")
			flag.Usage()
		}
		arg1544 := flag.Arg(1)
		mbTrans1545 := thrift.NewTMemoryBufferLen(len(arg1544))
		defer mbTrans1545.Close()
		_, err1546 := mbTrans1545.WriteString(arg1544)
		if err1546 != nil {
			Usage()
			return
		}
		factory1547 := thrift.NewTJSONProtocolFactory()
		jsProt1548 := factory1547.GetProtocol(mbTrans1545)
		argvalue0 := hive_metastore.NewPartitionsByExprRequest()
		err1549 := argvalue0.Read(context.Background(), jsProt1548)
		if err1549 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionNamesReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partitions_by_filter":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByFilter requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err1553 := (strconv.Atoi(flag.Arg(4)))
		if err1553 != nil {
			Usage()
			return
		}
		argvalue3 := int16(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartitionsByFilter(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_part_specs_by_filter":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartSpecsByFilter requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		tmp3, err1557 := (strconv.Atoi(flag.Arg(4)))
		if err1557 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		fmt.Print(client.GetPartSpecsByFilter(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_partitions_by_expr":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByExpr requires 1 args")
			flag.Usage()
		}
		arg1558 := flag.Arg(1)
		mbTrans1559 := thrift.NewTMemoryBufferLen(len(arg1558))
		defer mbTrans1559.Close()
		_, err1560 := mbTrans1559.WriteString(arg1558)
		if err1560 != nil {
			Usage()
			return
		}
		factory1561 := thrift.NewTJSONProtocolFactory()
		jsProt1562 := factory1561.GetProtocol(mbTrans1559)
		argvalue0 := hive_metastore.NewPartitionsByExprRequest()
		err1563 := argvalue0.Read(context.Background(), jsProt1562)
		if err1563 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsByExpr(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partitions_spec_by_expr":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsSpecByExpr requires 1 args")
			flag.Usage()
		}
		arg1564 := flag.Arg(1)
		mbTrans1565 := thrift.NewTMemoryBufferLen(len(arg1564))
		defer mbTrans1565.Close()
		_, err1566 := mbTrans1565.WriteString(arg1564)
		if err1566 != nil {
			Usage()
			return
		}
		factory1567 := thrift.NewTJSONProtocolFactory()
		jsProt1568 := factory1567.GetProtocol(mbTrans1565)
		argvalue0 := hive_metastore.NewPartitionsByExprRequest()
		err1569 := argvalue0.Read(context.Background(), jsProt1568)
		if err1569 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsSpecByExpr(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_num_partitions_by_filter":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetNumPartitionsByFilter requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetNumPartitionsByFilter(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_by_names":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByNames requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1575 := flag.Arg(3)
		mbTrans1576 := thrift.NewTMemoryBufferLen(len(arg1575))
		defer mbTrans1576.Close()
		_, err1577 := mbTrans1576.WriteString(arg1575)
		if err1577 != nil {
			Usage()
			return
		}
		factory1578 := thrift.NewTJSONProtocolFactory()
		jsProt1579 := factory1578.GetProtocol(mbTrans1576)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsByNamesArgs()
		err1580 := containerStruct2.ReadField3(context.Background(), jsProt1579)
		if err1580 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Names
		value2 := argvalue2
		fmt.Print(client.GetPartitionsByNames(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partitions_by_names_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsByNamesReq requires 1 args")
			flag.Usage()
		}
		arg1581 := flag.Arg(1)
		mbTrans1582 := thrift.NewTMemoryBufferLen(len(arg1581))
		defer mbTrans1582.Close()
		_, err1583 := mbTrans1582.WriteString(arg1581)
		if err1583 != nil {
			Usage()
			return
		}
		factory1584 := thrift.NewTJSONProtocolFactory()
		jsProt1585 := factory1584.GetProtocol(mbTrans1582)
		argvalue0 := hive_metastore.NewGetPartitionsByNamesRequest()
		err1586 := argvalue0.Read(context.Background(), jsProt1585)
		if err1586 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsByNamesReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_partition":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterPartition requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1589 := flag.Arg(3)
		mbTrans1590 := thrift.NewTMemoryBufferLen(len(arg1589))
		defer mbTrans1590.Close()
		_, err1591 := mbTrans1590.WriteString(arg1589)
		if err1591 != nil {
			Usage()
			return
		}
		factory1592 := thrift.NewTJSONProtocolFactory()
		jsProt1593 := factory1592.GetProtocol(mbTrans1590)
		argvalue2 := hive_metastore.NewPartition()
		err1594 := argvalue2.Read(context.Background(), jsProt1593)
		if err1594 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterPartition(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partitions":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterPartitions requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1597 := flag.Arg(3)
		mbTrans1598 := thrift.NewTMemoryBufferLen(len(arg1597))
		defer mbTrans1598.Close()
		_, err1599 := mbTrans1598.WriteString(arg1597)
		if err1599 != nil {
			Usage()
			return
		}
		factory1600 := thrift.NewTJSONProtocolFactory()
		jsProt1601 := factory1600.GetProtocol(mbTrans1598)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsArgs()
		err1602 := containerStruct2.ReadField3(context.Background(), jsProt1601)
		if err1602 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.NewParts_
		value2 := argvalue2
		fmt.Print(client.AlterPartitions(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "alter_partitions_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterPartitionsWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1605 := flag.Arg(3)
		mbTrans1606 := thrift.NewTMemoryBufferLen(len(arg1605))
		defer mbTrans1606.Close()
		_, err1607 := mbTrans1606.WriteString(arg1605)
		if err1607 != nil {
			Usage()
			return
		}
		factory1608 := thrift.NewTJSONProtocolFactory()
		jsProt1609 := factory1608.GetProtocol(mbTrans1606)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs()
		err1610 := containerStruct2.ReadField3(context.Background(), jsProt1609)
		if err1610 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.NewParts_
		value2 := argvalue2
		arg1611 := flag.Arg(4)
		mbTrans1612 := thrift.NewTMemoryBufferLen(len(arg1611))
		defer mbTrans1612.Close()
		_, err1613 := mbTrans1612.WriteString(arg1611)
		if err1613 != nil {
			Usage()
			return
		}
		factory1614 := thrift.NewTJSONProtocolFactory()
		jsProt1615 := factory1614.GetProtocol(mbTrans1612)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1616 := argvalue3.Read(context.Background(), jsProt1615)
		if err1616 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterPartitionsWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "alter_partitions_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterPartitionsReq requires 1 args")
			flag.Usage()
		}
		arg1617 := flag.Arg(1)
		mbTrans1618 := thrift.NewTMemoryBufferLen(len(arg1617))
		defer mbTrans1618.Close()
		_, err1619 := mbTrans1618.WriteString(arg1617)
		if err1619 != nil {
			Usage()
			return
		}
		factory1620 := thrift.NewTJSONProtocolFactory()
		jsProt1621 := factory1620.GetProtocol(mbTrans1618)
		argvalue0 := hive_metastore.NewAlterPartitionsRequest()
		err1622 := argvalue0.Read(context.Background(), jsProt1621)
		if err1622 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterPartitionsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_partition_with_environment_context":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AlterPartitionWithEnvironmentContext requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1625 := flag.Arg(3)
		mbTrans1626 := thrift.NewTMemoryBufferLen(len(arg1625))
		defer mbTrans1626.Close()
		_, err1627 := mbTrans1626.WriteString(arg1625)
		if err1627 != nil {
			Usage()
			return
		}
		factory1628 := thrift.NewTJSONProtocolFactory()
		jsProt1629 := factory1628.GetProtocol(mbTrans1626)
		argvalue2 := hive_metastore.NewPartition()
		err1630 := argvalue2.Read(context.Background(), jsProt1629)
		if err1630 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg1631 := flag.Arg(4)
		mbTrans1632 := thrift.NewTMemoryBufferLen(len(arg1631))
		defer mbTrans1632.Close()
		_, err1633 := mbTrans1632.WriteString(arg1631)
		if err1633 != nil {
			Usage()
			return
		}
		factory1634 := thrift.NewTJSONProtocolFactory()
		jsProt1635 := factory1634.GetProtocol(mbTrans1632)
		argvalue3 := hive_metastore.NewEnvironmentContext()
		err1636 := argvalue3.Read(context.Background(), jsProt1635)
		if err1636 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AlterPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "rename_partition":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "RenamePartition requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1639 := flag.Arg(3)
		mbTrans1640 := thrift.NewTMemoryBufferLen(len(arg1639))
		defer mbTrans1640.Close()
		_, err1641 := mbTrans1640.WriteString(arg1639)
		if err1641 != nil {
			Usage()
			return
		}
		factory1642 := thrift.NewTJSONProtocolFactory()
		jsProt1643 := factory1642.GetProtocol(mbTrans1640)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreRenamePartitionArgs()
		err1644 := containerStruct2.ReadField3(context.Background(), jsProt1643)
		if err1644 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		arg1645 := flag.Arg(4)
		mbTrans1646 := thrift.NewTMemoryBufferLen(len(arg1645))
		defer mbTrans1646.Close()
		_, err1647 := mbTrans1646.WriteString(arg1645)
		if err1647 != nil {
			Usage()
			return
		}
		factory1648 := thrift.NewTJSONProtocolFactory()
		jsProt1649 := factory1648.GetProtocol(mbTrans1646)
		argvalue3 := hive_metastore.NewPartition()
		err1650 := argvalue3.Read(context.Background(), jsProt1649)
		if err1650 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.RenamePartition(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "rename_partition_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RenamePartitionReq requires 1 args")
			flag.Usage()
		}
		arg1651 := flag.Arg(1)
		mbTrans1652 := thrift.NewTMemoryBufferLen(len(arg1651))
		defer mbTrans1652.Close()
		_, err1653 := mbTrans1652.WriteString(arg1651)
		if err1653 != nil {
			Usage()
			return
		}
		factory1654 := thrift.NewTJSONProtocolFactory()
		jsProt1655 := factory1654.GetProtocol(mbTrans1652)
		argvalue0 := hive_metastore.NewRenamePartitionRequest()
		err1656 := argvalue0.Read(context.Background(), jsProt1655)
		if err1656 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RenamePartitionReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "partition_name_has_valid_characters":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "PartitionNameHasValidCharacters requires 2 args")
			flag.Usage()
		}
		arg1657 := flag.Arg(1)
		mbTrans1658 := thrift.NewTMemoryBufferLen(len(arg1657))
		defer mbTrans1658.Close()
		_, err1659 := mbTrans1658.WriteString(arg1657)
		if err1659 != nil {
			Usage()
			return
		}
		factory1660 := thrift.NewTJSONProtocolFactory()
		jsProt1661 := factory1660.GetProtocol(mbTrans1658)
		containerStruct0 := hive_metastore.NewThriftHiveMetastorePartitionNameHasValidCharactersArgs()
		err1662 := containerStruct0.ReadField1(context.Background(), jsProt1661)
		if err1662 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.PartVals
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.PartitionNameHasValidCharacters(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_config_value":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetConfigValue requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetConfigValue(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "partition_name_to_vals":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PartitionNameToVals requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PartitionNameToVals(context.Background(), value0))
		fmt.Print("\n")
		break
	case "partition_name_to_spec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PartitionNameToSpec requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.PartitionNameToSpec(context.Background(), value0))
		fmt.Print("\n")
		break
	case "markPartitionForEvent":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MarkPartitionForEvent requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1670 := flag.Arg(3)
		mbTrans1671 := thrift.NewTMemoryBufferLen(len(arg1670))
		defer mbTrans1671.Close()
		_, err1672 := mbTrans1671.WriteString(arg1670)
		if err1672 != nil {
			Usage()
			return
		}
		factory1673 := thrift.NewTJSONProtocolFactory()
		jsProt1674 := factory1673.GetProtocol(mbTrans1671)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreMarkPartitionForEventArgs()
		err1675 := containerStruct2.ReadField3(context.Background(), jsProt1674)
		if err1675 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := hive_metastore.PartitionEventType(tmp3)
		value3 := argvalue3
		fmt.Print(client.MarkPartitionForEvent(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "isPartitionMarkedForEvent":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "IsPartitionMarkedForEvent requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1678 := flag.Arg(3)
		mbTrans1679 := thrift.NewTMemoryBufferLen(len(arg1678))
		defer mbTrans1679.Close()
		_, err1680 := mbTrans1679.WriteString(arg1678)
		if err1680 != nil {
			Usage()
			return
		}
		factory1681 := thrift.NewTJSONProtocolFactory()
		jsProt1682 := factory1681.GetProtocol(mbTrans1679)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreIsPartitionMarkedForEventArgs()
		err1683 := containerStruct2.ReadField3(context.Background(), jsProt1682)
		if err1683 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.PartVals
		value2 := argvalue2
		tmp3, err := (strconv.Atoi(flag.Arg(4)))
		if err != nil {
			Usage()
			return
		}
		argvalue3 := hive_metastore.PartitionEventType(tmp3)
		value3 := argvalue3
		fmt.Print(client.IsPartitionMarkedForEvent(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_primary_keys":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPrimaryKeys requires 1 args")
			flag.Usage()
		}
		arg1684 := flag.Arg(1)
		mbTrans1685 := thrift.NewTMemoryBufferLen(len(arg1684))
		defer mbTrans1685.Close()
		_, err1686 := mbTrans1685.WriteString(arg1684)
		if err1686 != nil {
			Usage()
			return
		}
		factory1687 := thrift.NewTJSONProtocolFactory()
		jsProt1688 := factory1687.GetProtocol(mbTrans1685)
		argvalue0 := hive_metastore.NewPrimaryKeysRequest()
		err1689 := argvalue0.Read(context.Background(), jsProt1688)
		if err1689 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPrimaryKeys(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_foreign_keys":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetForeignKeys requires 1 args")
			flag.Usage()
		}
		arg1690 := flag.Arg(1)
		mbTrans1691 := thrift.NewTMemoryBufferLen(len(arg1690))
		defer mbTrans1691.Close()
		_, err1692 := mbTrans1691.WriteString(arg1690)
		if err1692 != nil {
			Usage()
			return
		}
		factory1693 := thrift.NewTJSONProtocolFactory()
		jsProt1694 := factory1693.GetProtocol(mbTrans1691)
		argvalue0 := hive_metastore.NewForeignKeysRequest()
		err1695 := argvalue0.Read(context.Background(), jsProt1694)
		if err1695 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetForeignKeys(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_unique_constraints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUniqueConstraints requires 1 args")
			flag.Usage()
		}
		arg1696 := flag.Arg(1)
		mbTrans1697 := thrift.NewTMemoryBufferLen(len(arg1696))
		defer mbTrans1697.Close()
		_, err1698 := mbTrans1697.WriteString(arg1696)
		if err1698 != nil {
			Usage()
			return
		}
		factory1699 := thrift.NewTJSONProtocolFactory()
		jsProt1700 := factory1699.GetProtocol(mbTrans1697)
		argvalue0 := hive_metastore.NewUniqueConstraintsRequest()
		err1701 := argvalue0.Read(context.Background(), jsProt1700)
		if err1701 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetUniqueConstraints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_not_null_constraints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNotNullConstraints requires 1 args")
			flag.Usage()
		}
		arg1702 := flag.Arg(1)
		mbTrans1703 := thrift.NewTMemoryBufferLen(len(arg1702))
		defer mbTrans1703.Close()
		_, err1704 := mbTrans1703.WriteString(arg1702)
		if err1704 != nil {
			Usage()
			return
		}
		factory1705 := thrift.NewTJSONProtocolFactory()
		jsProt1706 := factory1705.GetProtocol(mbTrans1703)
		argvalue0 := hive_metastore.NewNotNullConstraintsRequest()
		err1707 := argvalue0.Read(context.Background(), jsProt1706)
		if err1707 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetNotNullConstraints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_default_constraints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDefaultConstraints requires 1 args")
			flag.Usage()
		}
		arg1708 := flag.Arg(1)
		mbTrans1709 := thrift.NewTMemoryBufferLen(len(arg1708))
		defer mbTrans1709.Close()
		_, err1710 := mbTrans1709.WriteString(arg1708)
		if err1710 != nil {
			Usage()
			return
		}
		factory1711 := thrift.NewTJSONProtocolFactory()
		jsProt1712 := factory1711.GetProtocol(mbTrans1709)
		argvalue0 := hive_metastore.NewDefaultConstraintsRequest()
		err1713 := argvalue0.Read(context.Background(), jsProt1712)
		if err1713 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetDefaultConstraints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_check_constraints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCheckConstraints requires 1 args")
			flag.Usage()
		}
		arg1714 := flag.Arg(1)
		mbTrans1715 := thrift.NewTMemoryBufferLen(len(arg1714))
		defer mbTrans1715.Close()
		_, err1716 := mbTrans1715.WriteString(arg1714)
		if err1716 != nil {
			Usage()
			return
		}
		factory1717 := thrift.NewTJSONProtocolFactory()
		jsProt1718 := factory1717.GetProtocol(mbTrans1715)
		argvalue0 := hive_metastore.NewCheckConstraintsRequest()
		err1719 := argvalue0.Read(context.Background(), jsProt1718)
		if err1719 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetCheckConstraints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_table_constraints":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllTableConstraints requires 1 args")
			flag.Usage()
		}
		arg1720 := flag.Arg(1)
		mbTrans1721 := thrift.NewTMemoryBufferLen(len(arg1720))
		defer mbTrans1721.Close()
		_, err1722 := mbTrans1721.WriteString(arg1720)
		if err1722 != nil {
			Usage()
			return
		}
		factory1723 := thrift.NewTJSONProtocolFactory()
		jsProt1724 := factory1723.GetProtocol(mbTrans1721)
		argvalue0 := hive_metastore.NewAllTableConstraintsRequest()
		err1725 := argvalue0.Read(context.Background(), jsProt1724)
		if err1725 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetAllTableConstraints(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_table_column_statistics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateTableColumnStatistics requires 1 args")
			flag.Usage()
		}
		arg1726 := flag.Arg(1)
		mbTrans1727 := thrift.NewTMemoryBufferLen(len(arg1726))
		defer mbTrans1727.Close()
		_, err1728 := mbTrans1727.WriteString(arg1726)
		if err1728 != nil {
			Usage()
			return
		}
		factory1729 := thrift.NewTJSONProtocolFactory()
		jsProt1730 := factory1729.GetProtocol(mbTrans1727)
		argvalue0 := hive_metastore.NewColumnStatistics()
		err1731 := argvalue0.Read(context.Background(), jsProt1730)
		if err1731 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateTableColumnStatistics(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_partition_column_statistics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdatePartitionColumnStatistics requires 1 args")
			flag.Usage()
		}
		arg1732 := flag.Arg(1)
		mbTrans1733 := thrift.NewTMemoryBufferLen(len(arg1732))
		defer mbTrans1733.Close()
		_, err1734 := mbTrans1733.WriteString(arg1732)
		if err1734 != nil {
			Usage()
			return
		}
		factory1735 := thrift.NewTJSONProtocolFactory()
		jsProt1736 := factory1735.GetProtocol(mbTrans1733)
		argvalue0 := hive_metastore.NewColumnStatistics()
		err1737 := argvalue0.Read(context.Background(), jsProt1736)
		if err1737 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdatePartitionColumnStatistics(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_table_column_statistics_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdateTableColumnStatisticsReq requires 1 args")
			flag.Usage()
		}
		arg1738 := flag.Arg(1)
		mbTrans1739 := thrift.NewTMemoryBufferLen(len(arg1738))
		defer mbTrans1739.Close()
		_, err1740 := mbTrans1739.WriteString(arg1738)
		if err1740 != nil {
			Usage()
			return
		}
		factory1741 := thrift.NewTJSONProtocolFactory()
		jsProt1742 := factory1741.GetProtocol(mbTrans1739)
		argvalue0 := hive_metastore.NewSetPartitionsStatsRequest()
		err1743 := argvalue0.Read(context.Background(), jsProt1742)
		if err1743 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdateTableColumnStatisticsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_partition_column_statistics_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "UpdatePartitionColumnStatisticsReq requires 1 args")
			flag.Usage()
		}
		arg1744 := flag.Arg(1)
		mbTrans1745 := thrift.NewTMemoryBufferLen(len(arg1744))
		defer mbTrans1745.Close()
		_, err1746 := mbTrans1745.WriteString(arg1744)
		if err1746 != nil {
			Usage()
			return
		}
		factory1747 := thrift.NewTJSONProtocolFactory()
		jsProt1748 := factory1747.GetProtocol(mbTrans1745)
		argvalue0 := hive_metastore.NewSetPartitionsStatsRequest()
		err1749 := argvalue0.Read(context.Background(), jsProt1748)
		if err1749 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.UpdatePartitionColumnStatisticsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_table_column_statistics":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetTableColumnStatistics requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetTableColumnStatistics(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_partition_column_statistics":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetPartitionColumnStatistics requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.GetPartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "get_table_statistics_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableStatisticsReq requires 1 args")
			flag.Usage()
		}
		arg1757 := flag.Arg(1)
		mbTrans1758 := thrift.NewTMemoryBufferLen(len(arg1757))
		defer mbTrans1758.Close()
		_, err1759 := mbTrans1758.WriteString(arg1757)
		if err1759 != nil {
			Usage()
			return
		}
		factory1760 := thrift.NewTJSONProtocolFactory()
		jsProt1761 := factory1760.GetProtocol(mbTrans1758)
		argvalue0 := hive_metastore.NewTableStatsRequest()
		err1762 := argvalue0.Read(context.Background(), jsProt1761)
		if err1762 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTableStatisticsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partitions_statistics_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsStatisticsReq requires 1 args")
			flag.Usage()
		}
		arg1763 := flag.Arg(1)
		mbTrans1764 := thrift.NewTMemoryBufferLen(len(arg1763))
		defer mbTrans1764.Close()
		_, err1765 := mbTrans1764.WriteString(arg1763)
		if err1765 != nil {
			Usage()
			return
		}
		factory1766 := thrift.NewTJSONProtocolFactory()
		jsProt1767 := factory1766.GetProtocol(mbTrans1764)
		argvalue0 := hive_metastore.NewPartitionsStatsRequest()
		err1768 := argvalue0.Read(context.Background(), jsProt1767)
		if err1768 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsStatisticsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_aggr_stats_for":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAggrStatsFor requires 1 args")
			flag.Usage()
		}
		arg1769 := flag.Arg(1)
		mbTrans1770 := thrift.NewTMemoryBufferLen(len(arg1769))
		defer mbTrans1770.Close()
		_, err1771 := mbTrans1770.WriteString(arg1769)
		if err1771 != nil {
			Usage()
			return
		}
		factory1772 := thrift.NewTJSONProtocolFactory()
		jsProt1773 := factory1772.GetProtocol(mbTrans1770)
		argvalue0 := hive_metastore.NewPartitionsStatsRequest()
		err1774 := argvalue0.Read(context.Background(), jsProt1773)
		if err1774 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetAggrStatsFor(context.Background(), value0))
		fmt.Print("\n")
		break
	case "set_aggr_stats_for":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetAggrStatsFor requires 1 args")
			flag.Usage()
		}
		arg1775 := flag.Arg(1)
		mbTrans1776 := thrift.NewTMemoryBufferLen(len(arg1775))
		defer mbTrans1776.Close()
		_, err1777 := mbTrans1776.WriteString(arg1775)
		if err1777 != nil {
			Usage()
			return
		}
		factory1778 := thrift.NewTJSONProtocolFactory()
		jsProt1779 := factory1778.GetProtocol(mbTrans1776)
		argvalue0 := hive_metastore.NewSetPartitionsStatsRequest()
		err1780 := argvalue0.Read(context.Background(), jsProt1779)
		if err1780 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetAggrStatsFor(context.Background(), value0))
		fmt.Print("\n")
		break
	case "delete_partition_column_statistics":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DeletePartitionColumnStatistics requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.DeletePartitionColumnStatistics(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "delete_table_column_statistics":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DeleteTableColumnStatistics requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.DeleteTableColumnStatistics(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "create_function":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateFunction requires 1 args")
			flag.Usage()
		}
		arg1790 := flag.Arg(1)
		mbTrans1791 := thrift.NewTMemoryBufferLen(len(arg1790))
		defer mbTrans1791.Close()
		_, err1792 := mbTrans1791.WriteString(arg1790)
		if err1792 != nil {
			Usage()
			return
		}
		factory1793 := thrift.NewTJSONProtocolFactory()
		jsProt1794 := factory1793.GetProtocol(mbTrans1791)
		argvalue0 := hive_metastore.NewFunction()
		err1795 := argvalue0.Read(context.Background(), jsProt1794)
		if err1795 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateFunction(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_function":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DropFunction requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DropFunction(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "alter_function":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "AlterFunction requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1800 := flag.Arg(3)
		mbTrans1801 := thrift.NewTMemoryBufferLen(len(arg1800))
		defer mbTrans1801.Close()
		_, err1802 := mbTrans1801.WriteString(arg1800)
		if err1802 != nil {
			Usage()
			return
		}
		factory1803 := thrift.NewTJSONProtocolFactory()
		jsProt1804 := factory1803.GetProtocol(mbTrans1801)
		argvalue2 := hive_metastore.NewFunction()
		err1805 := argvalue2.Read(context.Background(), jsProt1804)
		if err1805 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.AlterFunction(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "get_functions":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFunctions requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFunctions(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_function":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetFunction requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetFunction(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_all_functions":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllFunctions requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllFunctions(context.Background()))
		fmt.Print("\n")
		break
	case "create_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateRole requires 1 args")
			flag.Usage()
		}
		arg1810 := flag.Arg(1)
		mbTrans1811 := thrift.NewTMemoryBufferLen(len(arg1810))
		defer mbTrans1811.Close()
		_, err1812 := mbTrans1811.WriteString(arg1810)
		if err1812 != nil {
			Usage()
			return
		}
		factory1813 := thrift.NewTJSONProtocolFactory()
		jsProt1814 := factory1813.GetProtocol(mbTrans1811)
		argvalue0 := hive_metastore.NewRole()
		err1815 := argvalue0.Read(context.Background(), jsProt1814)
		if err1815 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropRole requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DropRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_role_names":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetRoleNames requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetRoleNames(context.Background()))
		fmt.Print("\n")
		break
	case "grant_role":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GrantRole requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := hive_metastore.PrincipalType(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		tmp4, err := (strconv.Atoi(flag.Arg(5)))
		if err != nil {
			Usage()
			return
		}
		argvalue4 := hive_metastore.PrincipalType(tmp4)
		value4 := argvalue4
		argvalue5 := flag.Arg(6) == "true"
		value5 := argvalue5
		fmt.Print(client.GrantRole(context.Background(), value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "revoke_role":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RevokeRole requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err := (strconv.Atoi(flag.Arg(3)))
		if err != nil {
			Usage()
			return
		}
		argvalue2 := hive_metastore.PrincipalType(tmp2)
		value2 := argvalue2
		fmt.Print(client.RevokeRole(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "list_roles":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ListRoles requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := hive_metastore.PrincipalType(tmp1)
		value1 := argvalue1
		fmt.Print(client.ListRoles(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "grant_revoke_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantRevokeRole requires 1 args")
			flag.Usage()
		}
		arg1824 := flag.Arg(1)
		mbTrans1825 := thrift.NewTMemoryBufferLen(len(arg1824))
		defer mbTrans1825.Close()
		_, err1826 := mbTrans1825.WriteString(arg1824)
		if err1826 != nil {
			Usage()
			return
		}
		factory1827 := thrift.NewTJSONProtocolFactory()
		jsProt1828 := factory1827.GetProtocol(mbTrans1825)
		argvalue0 := hive_metastore.NewGrantRevokeRoleRequest()
		err1829 := argvalue0.Read(context.Background(), jsProt1828)
		if err1829 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantRevokeRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_principals_in_role":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPrincipalsInRole requires 1 args")
			flag.Usage()
		}
		arg1830 := flag.Arg(1)
		mbTrans1831 := thrift.NewTMemoryBufferLen(len(arg1830))
		defer mbTrans1831.Close()
		_, err1832 := mbTrans1831.WriteString(arg1830)
		if err1832 != nil {
			Usage()
			return
		}
		factory1833 := thrift.NewTJSONProtocolFactory()
		jsProt1834 := factory1833.GetProtocol(mbTrans1831)
		argvalue0 := hive_metastore.NewGetPrincipalsInRoleRequest()
		err1835 := argvalue0.Read(context.Background(), jsProt1834)
		if err1835 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPrincipalsInRole(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_role_grants_for_principal":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRoleGrantsForPrincipal requires 1 args")
			flag.Usage()
		}
		arg1836 := flag.Arg(1)
		mbTrans1837 := thrift.NewTMemoryBufferLen(len(arg1836))
		defer mbTrans1837.Close()
		_, err1838 := mbTrans1837.WriteString(arg1836)
		if err1838 != nil {
			Usage()
			return
		}
		factory1839 := thrift.NewTJSONProtocolFactory()
		jsProt1840 := factory1839.GetProtocol(mbTrans1837)
		argvalue0 := hive_metastore.NewGetRoleGrantsForPrincipalRequest()
		err1841 := argvalue0.Read(context.Background(), jsProt1840)
		if err1841 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetRoleGrantsForPrincipal(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_privilege_set":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetPrivilegeSet requires 3 args")
			flag.Usage()
		}
		arg1842 := flag.Arg(1)
		mbTrans1843 := thrift.NewTMemoryBufferLen(len(arg1842))
		defer mbTrans1843.Close()
		_, err1844 := mbTrans1843.WriteString(arg1842)
		if err1844 != nil {
			Usage()
			return
		}
		factory1845 := thrift.NewTJSONProtocolFactory()
		jsProt1846 := factory1845.GetProtocol(mbTrans1843)
		argvalue0 := hive_metastore.NewHiveObjectRef()
		err1847 := argvalue0.Read(context.Background(), jsProt1846)
		if err1847 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1849 := flag.Arg(3)
		mbTrans1850 := thrift.NewTMemoryBufferLen(len(arg1849))
		defer mbTrans1850.Close()
		_, err1851 := mbTrans1850.WriteString(arg1849)
		if err1851 != nil {
			Usage()
			return
		}
		factory1852 := thrift.NewTJSONProtocolFactory()
		jsProt1853 := factory1852.GetProtocol(mbTrans1850)
		containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPrivilegeSetArgs()
		err1854 := containerStruct2.ReadField3(context.Background(), jsProt1853)
		if err1854 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.GroupNames
		value2 := argvalue2
		fmt.Print(client.GetPrivilegeSet(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "list_privileges":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ListPrivileges requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := hive_metastore.PrincipalType(tmp1)
		value1 := argvalue1
		arg1856 := flag.Arg(3)
		mbTrans1857 := thrift.NewTMemoryBufferLen(len(arg1856))
		defer mbTrans1857.Close()
		_, err1858 := mbTrans1857.WriteString(arg1856)
		if err1858 != nil {
			Usage()
			return
		}
		factory1859 := thrift.NewTJSONProtocolFactory()
		jsProt1860 := factory1859.GetProtocol(mbTrans1857)
		argvalue2 := hive_metastore.NewHiveObjectRef()
		err1861 := argvalue2.Read(context.Background(), jsProt1860)
		if err1861 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.ListPrivileges(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "grant_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantPrivileges requires 1 args")
			flag.Usage()
		}
		arg1862 := flag.Arg(1)
		mbTrans1863 := thrift.NewTMemoryBufferLen(len(arg1862))
		defer mbTrans1863.Close()
		_, err1864 := mbTrans1863.WriteString(arg1862)
		if err1864 != nil {
			Usage()
			return
		}
		factory1865 := thrift.NewTJSONProtocolFactory()
		jsProt1866 := factory1865.GetProtocol(mbTrans1863)
		argvalue0 := hive_metastore.NewPrivilegeBag()
		err1867 := argvalue0.Read(context.Background(), jsProt1866)
		if err1867 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantPrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "revoke_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RevokePrivileges requires 1 args")
			flag.Usage()
		}
		arg1868 := flag.Arg(1)
		mbTrans1869 := thrift.NewTMemoryBufferLen(len(arg1868))
		defer mbTrans1869.Close()
		_, err1870 := mbTrans1869.WriteString(arg1868)
		if err1870 != nil {
			Usage()
			return
		}
		factory1871 := thrift.NewTJSONProtocolFactory()
		jsProt1872 := factory1871.GetProtocol(mbTrans1869)
		argvalue0 := hive_metastore.NewPrivilegeBag()
		err1873 := argvalue0.Read(context.Background(), jsProt1872)
		if err1873 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.RevokePrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "grant_revoke_privileges":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GrantRevokePrivileges requires 1 args")
			flag.Usage()
		}
		arg1874 := flag.Arg(1)
		mbTrans1875 := thrift.NewTMemoryBufferLen(len(arg1874))
		defer mbTrans1875.Close()
		_, err1876 := mbTrans1875.WriteString(arg1874)
		if err1876 != nil {
			Usage()
			return
		}
		factory1877 := thrift.NewTJSONProtocolFactory()
		jsProt1878 := factory1877.GetProtocol(mbTrans1875)
		argvalue0 := hive_metastore.NewGrantRevokePrivilegeRequest()
		err1879 := argvalue0.Read(context.Background(), jsProt1878)
		if err1879 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GrantRevokePrivileges(context.Background(), value0))
		fmt.Print("\n")
		break
	case "refresh_privileges":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RefreshPrivileges requires 3 args")
			flag.Usage()
		}
		arg1880 := flag.Arg(1)
		mbTrans1881 := thrift.NewTMemoryBufferLen(len(arg1880))
		defer mbTrans1881.Close()
		_, err1882 := mbTrans1881.WriteString(arg1880)
		if err1882 != nil {
			Usage()
			return
		}
		factory1883 := thrift.NewTJSONProtocolFactory()
		jsProt1884 := factory1883.GetProtocol(mbTrans1881)
		argvalue0 := hive_metastore.NewHiveObjectRef()
		err1885 := argvalue0.Read(context.Background(), jsProt1884)
		if err1885 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg1887 := flag.Arg(3)
		mbTrans1888 := thrift.NewTMemoryBufferLen(len(arg1887))
		defer mbTrans1888.Close()
		_, err1889 := mbTrans1888.WriteString(arg1887)
		if err1889 != nil {
			Usage()
			return
		}
		factory1890 := thrift.NewTJSONProtocolFactory()
		jsProt1891 := factory1890.GetProtocol(mbTrans1888)
		argvalue2 := hive_metastore.NewGrantRevokePrivilegeRequest()
		err1892 := argvalue2.Read(context.Background(), jsProt1891)
		if err1892 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.RefreshPrivileges(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "set_ugi":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetUgi requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg1894 := flag.Arg(2)
		mbTrans1895 := thrift.NewTMemoryBufferLen(len(arg1894))
		defer mbTrans1895.Close()
		_, err1896 := mbTrans1895.WriteString(arg1894)
		if err1896 != nil {
			Usage()
			return
		}
		factory1897 := thrift.NewTJSONProtocolFactory()
		jsProt1898 := factory1897.GetProtocol(mbTrans1895)
		containerStruct1 := hive_metastore.NewThriftHiveMetastoreSetUgiArgs()
		err1899 := containerStruct1.ReadField2(context.Background(), jsProt1898)
		if err1899 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.GroupNames
		value1 := argvalue1
		fmt.Print(client.SetUgi(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_delegation_token":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetDelegationToken requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetDelegationToken(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "renew_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RenewDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RenewDelegationToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "cancel_delegation_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CancelDelegationToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.CancelDelegationToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_token":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddToken requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AddToken(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "remove_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RemoveToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_token":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetToken requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetToken(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_token_identifiers":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetAllTokenIdentifiers requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetAllTokenIdentifiers(context.Background()))
		fmt.Print("\n")
		break
	case "add_master_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddMasterKey requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.AddMasterKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "update_master_key":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateMasterKey requires 2 args")
			flag.Usage()
		}
		tmp0, err1909 := (strconv.Atoi(flag.Arg(1)))
		if err1909 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UpdateMasterKey(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "remove_master_key":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveMasterKey requires 1 args")
			flag.Usage()
		}
		tmp0, err1911 := (strconv.Atoi(flag.Arg(1)))
		if err1911 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.RemoveMasterKey(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_master_keys":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetMasterKeys requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetMasterKeys(context.Background()))
		fmt.Print("\n")
		break
	case "get_open_txns":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOpenTxns requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOpenTxns(context.Background()))
		fmt.Print("\n")
		break
	case "get_open_txns_info":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOpenTxnsInfo requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOpenTxnsInfo(context.Background()))
		fmt.Print("\n")
		break
	case "open_txns":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OpenTxns requires 1 args")
			flag.Usage()
		}
		arg1912 := flag.Arg(1)
		mbTrans1913 := thrift.NewTMemoryBufferLen(len(arg1912))
		defer mbTrans1913.Close()
		_, err1914 := mbTrans1913.WriteString(arg1912)
		if err1914 != nil {
			Usage()
			return
		}
		factory1915 := thrift.NewTJSONProtocolFactory()
		jsProt1916 := factory1915.GetProtocol(mbTrans1913)
		argvalue0 := hive_metastore.NewOpenTxnRequest()
		err1917 := argvalue0.Read(context.Background(), jsProt1916)
		if err1917 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.OpenTxns(context.Background(), value0))
		fmt.Print("\n")
		break
	case "abort_txn":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AbortTxn requires 1 args")
			flag.Usage()
		}
		arg1918 := flag.Arg(1)
		mbTrans1919 := thrift.NewTMemoryBufferLen(len(arg1918))
		defer mbTrans1919.Close()
		_, err1920 := mbTrans1919.WriteString(arg1918)
		if err1920 != nil {
			Usage()
			return
		}
		factory1921 := thrift.NewTJSONProtocolFactory()
		jsProt1922 := factory1921.GetProtocol(mbTrans1919)
		argvalue0 := hive_metastore.NewAbortTxnRequest()
		err1923 := argvalue0.Read(context.Background(), jsProt1922)
		if err1923 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AbortTxn(context.Background(), value0))
		fmt.Print("\n")
		break
	case "abort_txns":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AbortTxns requires 1 args")
			flag.Usage()
		}
		arg1924 := flag.Arg(1)
		mbTrans1925 := thrift.NewTMemoryBufferLen(len(arg1924))
		defer mbTrans1925.Close()
		_, err1926 := mbTrans1925.WriteString(arg1924)
		if err1926 != nil {
			Usage()
			return
		}
		factory1927 := thrift.NewTJSONProtocolFactory()
		jsProt1928 := factory1927.GetProtocol(mbTrans1925)
		argvalue0 := hive_metastore.NewAbortTxnsRequest()
		err1929 := argvalue0.Read(context.Background(), jsProt1928)
		if err1929 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AbortTxns(context.Background(), value0))
		fmt.Print("\n")
		break
	case "commit_txn":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CommitTxn requires 1 args")
			flag.Usage()
		}
		arg1930 := flag.Arg(1)
		mbTrans1931 := thrift.NewTMemoryBufferLen(len(arg1930))
		defer mbTrans1931.Close()
		_, err1932 := mbTrans1931.WriteString(arg1930)
		if err1932 != nil {
			Usage()
			return
		}
		factory1933 := thrift.NewTJSONProtocolFactory()
		jsProt1934 := factory1933.GetProtocol(mbTrans1931)
		argvalue0 := hive_metastore.NewCommitTxnRequest()
		err1935 := argvalue0.Read(context.Background(), jsProt1934)
		if err1935 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CommitTxn(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_latest_txnid_in_conflict":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetLatestTxnidInConflict requires 1 args")
			flag.Usage()
		}
		argvalue0, err1936 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err1936 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetLatestTxnidInConflict(context.Background(), value0))
		fmt.Print("\n")
		break
	case "repl_tbl_writeid_state":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ReplTblWriteidState requires 1 args")
			flag.Usage()
		}
		arg1937 := flag.Arg(1)
		mbTrans1938 := thrift.NewTMemoryBufferLen(len(arg1937))
		defer mbTrans1938.Close()
		_, err1939 := mbTrans1938.WriteString(arg1937)
		if err1939 != nil {
			Usage()
			return
		}
		factory1940 := thrift.NewTJSONProtocolFactory()
		jsProt1941 := factory1940.GetProtocol(mbTrans1938)
		argvalue0 := hive_metastore.NewReplTblWriteIdStateRequest()
		err1942 := argvalue0.Read(context.Background(), jsProt1941)
		if err1942 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ReplTblWriteidState(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_valid_write_ids":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetValidWriteIds requires 1 args")
			flag.Usage()
		}
		arg1943 := flag.Arg(1)
		mbTrans1944 := thrift.NewTMemoryBufferLen(len(arg1943))
		defer mbTrans1944.Close()
		_, err1945 := mbTrans1944.WriteString(arg1943)
		if err1945 != nil {
			Usage()
			return
		}
		factory1946 := thrift.NewTJSONProtocolFactory()
		jsProt1947 := factory1946.GetProtocol(mbTrans1944)
		argvalue0 := hive_metastore.NewGetValidWriteIdsRequest()
		err1948 := argvalue0.Read(context.Background(), jsProt1947)
		if err1948 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetValidWriteIds(context.Background(), value0))
		fmt.Print("\n")
		break
	case "allocate_table_write_ids":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AllocateTableWriteIds requires 1 args")
			flag.Usage()
		}
		arg1949 := flag.Arg(1)
		mbTrans1950 := thrift.NewTMemoryBufferLen(len(arg1949))
		defer mbTrans1950.Close()
		_, err1951 := mbTrans1950.WriteString(arg1949)
		if err1951 != nil {
			Usage()
			return
		}
		factory1952 := thrift.NewTJSONProtocolFactory()
		jsProt1953 := factory1952.GetProtocol(mbTrans1950)
		argvalue0 := hive_metastore.NewAllocateTableWriteIdsRequest()
		err1954 := argvalue0.Read(context.Background(), jsProt1953)
		if err1954 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AllocateTableWriteIds(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_max_allocated_table_write_id":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetMaxAllocatedTableWriteID requires 1 args")
			flag.Usage()
		}
		arg1955 := flag.Arg(1)
		mbTrans1956 := thrift.NewTMemoryBufferLen(len(arg1955))
		defer mbTrans1956.Close()
		_, err1957 := mbTrans1956.WriteString(arg1955)
		if err1957 != nil {
			Usage()
			return
		}
		factory1958 := thrift.NewTJSONProtocolFactory()
		jsProt1959 := factory1958.GetProtocol(mbTrans1956)
		argvalue0 := hive_metastore.NewMaxAllocatedTableWriteIdRequest()
		err1960 := argvalue0.Read(context.Background(), jsProt1959)
		if err1960 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetMaxAllocatedTableWriteID(context.Background(), value0))
		fmt.Print("\n")
		break
	case "seed_write_id":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SeedWriteID requires 1 args")
			flag.Usage()
		}
		arg1961 := flag.Arg(1)
		mbTrans1962 := thrift.NewTMemoryBufferLen(len(arg1961))
		defer mbTrans1962.Close()
		_, err1963 := mbTrans1962.WriteString(arg1961)
		if err1963 != nil {
			Usage()
			return
		}
		factory1964 := thrift.NewTJSONProtocolFactory()
		jsProt1965 := factory1964.GetProtocol(mbTrans1962)
		argvalue0 := hive_metastore.NewSeedTableWriteIdsRequest()
		err1966 := argvalue0.Read(context.Background(), jsProt1965)
		if err1966 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SeedWriteID(context.Background(), value0))
		fmt.Print("\n")
		break
	case "seed_txn_id":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SeedTxnID requires 1 args")
			flag.Usage()
		}
		arg1967 := flag.Arg(1)
		mbTrans1968 := thrift.NewTMemoryBufferLen(len(arg1967))
		defer mbTrans1968.Close()
		_, err1969 := mbTrans1968.WriteString(arg1967)
		if err1969 != nil {
			Usage()
			return
		}
		factory1970 := thrift.NewTJSONProtocolFactory()
		jsProt1971 := factory1970.GetProtocol(mbTrans1968)
		argvalue0 := hive_metastore.NewSeedTxnIdRequest()
		err1972 := argvalue0.Read(context.Background(), jsProt1971)
		if err1972 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SeedTxnID(context.Background(), value0))
		fmt.Print("\n")
		break
	case "lock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Lock requires 1 args")
			flag.Usage()
		}
		arg1973 := flag.Arg(1)
		mbTrans1974 := thrift.NewTMemoryBufferLen(len(arg1973))
		defer mbTrans1974.Close()
		_, err1975 := mbTrans1974.WriteString(arg1973)
		if err1975 != nil {
			Usage()
			return
		}
		factory1976 := thrift.NewTJSONProtocolFactory()
		jsProt1977 := factory1976.GetProtocol(mbTrans1974)
		argvalue0 := hive_metastore.NewLockRequest()
		err1978 := argvalue0.Read(context.Background(), jsProt1977)
		if err1978 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Lock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "check_lock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CheckLock requires 1 args")
			flag.Usage()
		}
		arg1979 := flag.Arg(1)
		mbTrans1980 := thrift.NewTMemoryBufferLen(len(arg1979))
		defer mbTrans1980.Close()
		_, err1981 := mbTrans1980.WriteString(arg1979)
		if err1981 != nil {
			Usage()
			return
		}
		factory1982 := thrift.NewTJSONProtocolFactory()
		jsProt1983 := factory1982.GetProtocol(mbTrans1980)
		argvalue0 := hive_metastore.NewCheckLockRequest()
		err1984 := argvalue0.Read(context.Background(), jsProt1983)
		if err1984 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CheckLock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "unlock":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Unlock requires 1 args")
			flag.Usage()
		}
		arg1985 := flag.Arg(1)
		mbTrans1986 := thrift.NewTMemoryBufferLen(len(arg1985))
		defer mbTrans1986.Close()
		_, err1987 := mbTrans1986.WriteString(arg1985)
		if err1987 != nil {
			Usage()
			return
		}
		factory1988 := thrift.NewTJSONProtocolFactory()
		jsProt1989 := factory1988.GetProtocol(mbTrans1986)
		argvalue0 := hive_metastore.NewUnlockRequest()
		err1990 := argvalue0.Read(context.Background(), jsProt1989)
		if err1990 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Unlock(context.Background(), value0))
		fmt.Print("\n")
		break
	case "show_locks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ShowLocks requires 1 args")
			flag.Usage()
		}
		arg1991 := flag.Arg(1)
		mbTrans1992 := thrift.NewTMemoryBufferLen(len(arg1991))
		defer mbTrans1992.Close()
		_, err1993 := mbTrans1992.WriteString(arg1991)
		if err1993 != nil {
			Usage()
			return
		}
		factory1994 := thrift.NewTJSONProtocolFactory()
		jsProt1995 := factory1994.GetProtocol(mbTrans1992)
		argvalue0 := hive_metastore.NewShowLocksRequest()
		err1996 := argvalue0.Read(context.Background(), jsProt1995)
		if err1996 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ShowLocks(context.Background(), value0))
		fmt.Print("\n")
		break
	case "heartbeat":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Heartbeat requires 1 args")
			flag.Usage()
		}
		arg1997 := flag.Arg(1)
		mbTrans1998 := thrift.NewTMemoryBufferLen(len(arg1997))
		defer mbTrans1998.Close()
		_, err1999 := mbTrans1998.WriteString(arg1997)
		if err1999 != nil {
			Usage()
			return
		}
		factory2000 := thrift.NewTJSONProtocolFactory()
		jsProt2001 := factory2000.GetProtocol(mbTrans1998)
		argvalue0 := hive_metastore.NewHeartbeatRequest()
		err2002 := argvalue0.Read(context.Background(), jsProt2001)
		if err2002 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Heartbeat(context.Background(), value0))
		fmt.Print("\n")
		break
	case "heartbeat_txn_range":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "HeartbeatTxnRange requires 1 args")
			flag.Usage()
		}
		arg2003 := flag.Arg(1)
		mbTrans2004 := thrift.NewTMemoryBufferLen(len(arg2003))
		defer mbTrans2004.Close()
		_, err2005 := mbTrans2004.WriteString(arg2003)
		if err2005 != nil {
			Usage()
			return
		}
		factory2006 := thrift.NewTJSONProtocolFactory()
		jsProt2007 := factory2006.GetProtocol(mbTrans2004)
		argvalue0 := hive_metastore.NewHeartbeatTxnRangeRequest()
		err2008 := argvalue0.Read(context.Background(), jsProt2007)
		if err2008 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.HeartbeatTxnRange(context.Background(), value0))
		fmt.Print("\n")
		break
	case "compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Compact requires 1 args")
			flag.Usage()
		}
		arg2009 := flag.Arg(1)
		mbTrans2010 := thrift.NewTMemoryBufferLen(len(arg2009))
		defer mbTrans2010.Close()
		_, err2011 := mbTrans2010.WriteString(arg2009)
		if err2011 != nil {
			Usage()
			return
		}
		factory2012 := thrift.NewTJSONProtocolFactory()
		jsProt2013 := factory2012.GetProtocol(mbTrans2010)
		argvalue0 := hive_metastore.NewCompactionRequest()
		err2014 := argvalue0.Read(context.Background(), jsProt2013)
		if err2014 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Compact(context.Background(), value0))
		fmt.Print("\n")
		break
	case "compact2":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Compact2 requires 1 args")
			flag.Usage()
		}
		arg2015 := flag.Arg(1)
		mbTrans2016 := thrift.NewTMemoryBufferLen(len(arg2015))
		defer mbTrans2016.Close()
		_, err2017 := mbTrans2016.WriteString(arg2015)
		if err2017 != nil {
			Usage()
			return
		}
		factory2018 := thrift.NewTJSONProtocolFactory()
		jsProt2019 := factory2018.GetProtocol(mbTrans2016)
		argvalue0 := hive_metastore.NewCompactionRequest()
		err2020 := argvalue0.Read(context.Background(), jsProt2019)
		if err2020 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Compact2(context.Background(), value0))
		fmt.Print("\n")
		break
	case "show_compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ShowCompact requires 1 args")
			flag.Usage()
		}
		arg2021 := flag.Arg(1)
		mbTrans2022 := thrift.NewTMemoryBufferLen(len(arg2021))
		defer mbTrans2022.Close()
		_, err2023 := mbTrans2022.WriteString(arg2021)
		if err2023 != nil {
			Usage()
			return
		}
		factory2024 := thrift.NewTJSONProtocolFactory()
		jsProt2025 := factory2024.GetProtocol(mbTrans2022)
		argvalue0 := hive_metastore.NewShowCompactRequest()
		err2026 := argvalue0.Read(context.Background(), jsProt2025)
		if err2026 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ShowCompact(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_dynamic_partitions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddDynamicPartitions requires 1 args")
			flag.Usage()
		}
		arg2027 := flag.Arg(1)
		mbTrans2028 := thrift.NewTMemoryBufferLen(len(arg2027))
		defer mbTrans2028.Close()
		_, err2029 := mbTrans2028.WriteString(arg2027)
		if err2029 != nil {
			Usage()
			return
		}
		factory2030 := thrift.NewTJSONProtocolFactory()
		jsProt2031 := factory2030.GetProtocol(mbTrans2028)
		argvalue0 := hive_metastore.NewAddDynamicPartitions()
		err2032 := argvalue0.Read(context.Background(), jsProt2031)
		if err2032 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddDynamicPartitions(context.Background(), value0))
		fmt.Print("\n")
		break
	case "find_next_compact":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "FindNextCompact requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.FindNextCompact(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "update_compactor_state":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateCompactorState requires 2 args")
			flag.Usage()
		}
		arg2035 := flag.Arg(1)
		mbTrans2036 := thrift.NewTMemoryBufferLen(len(arg2035))
		defer mbTrans2036.Close()
		_, err2037 := mbTrans2036.WriteString(arg2035)
		if err2037 != nil {
			Usage()
			return
		}
		factory2038 := thrift.NewTJSONProtocolFactory()
		jsProt2039 := factory2038.GetProtocol(mbTrans2036)
		argvalue0 := hive_metastore.NewCompactionInfoStruct()
		err2040 := argvalue0.Read(context.Background(), jsProt2039)
		if err2040 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1, err2041 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err2041 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.UpdateCompactorState(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "find_columns_with_stats":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindColumnsWithStats requires 1 args")
			flag.Usage()
		}
		arg2042 := flag.Arg(1)
		mbTrans2043 := thrift.NewTMemoryBufferLen(len(arg2042))
		defer mbTrans2043.Close()
		_, err2044 := mbTrans2043.WriteString(arg2042)
		if err2044 != nil {
			Usage()
			return
		}
		factory2045 := thrift.NewTJSONProtocolFactory()
		jsProt2046 := factory2045.GetProtocol(mbTrans2043)
		argvalue0 := hive_metastore.NewCompactionInfoStruct()
		err2047 := argvalue0.Read(context.Background(), jsProt2046)
		if err2047 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.FindColumnsWithStats(context.Background(), value0))
		fmt.Print("\n")
		break
	case "mark_cleaned":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MarkCleaned requires 1 args")
			flag.Usage()
		}
		arg2048 := flag.Arg(1)
		mbTrans2049 := thrift.NewTMemoryBufferLen(len(arg2048))
		defer mbTrans2049.Close()
		_, err2050 := mbTrans2049.WriteString(arg2048)
		if err2050 != nil {
			Usage()
			return
		}
		factory2051 := thrift.NewTJSONProtocolFactory()
		jsProt2052 := factory2051.GetProtocol(mbTrans2049)
		argvalue0 := hive_metastore.NewCompactionInfoStruct()
		err2053 := argvalue0.Read(context.Background(), jsProt2052)
		if err2053 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.MarkCleaned(context.Background(), value0))
		fmt.Print("\n")
		break
	case "mark_compacted":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MarkCompacted requires 1 args")
			flag.Usage()
		}
		arg2054 := flag.Arg(1)
		mbTrans2055 := thrift.NewTMemoryBufferLen(len(arg2054))
		defer mbTrans2055.Close()
		_, err2056 := mbTrans2055.WriteString(arg2054)
		if err2056 != nil {
			Usage()
			return
		}
		factory2057 := thrift.NewTJSONProtocolFactory()
		jsProt2058 := factory2057.GetProtocol(mbTrans2055)
		argvalue0 := hive_metastore.NewCompactionInfoStruct()
		err2059 := argvalue0.Read(context.Background(), jsProt2058)
		if err2059 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.MarkCompacted(context.Background(), value0))
		fmt.Print("\n")
		break
	case "mark_failed":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MarkFailed requires 1 args")
			flag.Usage()
		}
		arg2060 := flag.Arg(1)
		mbTrans2061 := thrift.NewTMemoryBufferLen(len(arg2060))
		defer mbTrans2061.Close()
		_, err2062 := mbTrans2061.WriteString(arg2060)
		if err2062 != nil {
			Usage()
			return
		}
		factory2063 := thrift.NewTJSONProtocolFactory()
		jsProt2064 := factory2063.GetProtocol(mbTrans2061)
		argvalue0 := hive_metastore.NewCompactionInfoStruct()
		err2065 := argvalue0.Read(context.Background(), jsProt2064)
		if err2065 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.MarkFailed(context.Background(), value0))
		fmt.Print("\n")
		break
	case "set_hadoop_jobid":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetHadoopJobid requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1, err2067 := (strconv.ParseInt(flag.Arg(2), 10, 64))
		if err2067 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.SetHadoopJobid(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "get_latest_committed_compaction_info":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetLatestCommittedCompactionInfo requires 1 args")
			flag.Usage()
		}
		arg2068 := flag.Arg(1)
		mbTrans2069 := thrift.NewTMemoryBufferLen(len(arg2068))
		defer mbTrans2069.Close()
		_, err2070 := mbTrans2069.WriteString(arg2068)
		if err2070 != nil {
			Usage()
			return
		}
		factory2071 := thrift.NewTJSONProtocolFactory()
		jsProt2072 := factory2071.GetProtocol(mbTrans2069)
		argvalue0 := hive_metastore.NewGetLatestCommittedCompactionInfoRequest()
		err2073 := argvalue0.Read(context.Background(), jsProt2072)
		if err2073 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetLatestCommittedCompactionInfo(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_next_notification":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNextNotification requires 1 args")
			flag.Usage()
		}
		arg2074 := flag.Arg(1)
		mbTrans2075 := thrift.NewTMemoryBufferLen(len(arg2074))
		defer mbTrans2075.Close()
		_, err2076 := mbTrans2075.WriteString(arg2074)
		if err2076 != nil {
			Usage()
			return
		}
		factory2077 := thrift.NewTJSONProtocolFactory()
		jsProt2078 := factory2077.GetProtocol(mbTrans2075)
		argvalue0 := hive_metastore.NewNotificationEventRequest()
		err2079 := argvalue0.Read(context.Background(), jsProt2078)
		if err2079 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetNextNotification(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_current_notificationEventId":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCurrentNotificationEventId requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCurrentNotificationEventId(context.Background()))
		fmt.Print("\n")
		break
	case "get_notification_events_count":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNotificationEventsCount requires 1 args")
			flag.Usage()
		}
		arg2080 := flag.Arg(1)
		mbTrans2081 := thrift.NewTMemoryBufferLen(len(arg2080))
		defer mbTrans2081.Close()
		_, err2082 := mbTrans2081.WriteString(arg2080)
		if err2082 != nil {
			Usage()
			return
		}
		factory2083 := thrift.NewTJSONProtocolFactory()
		jsProt2084 := factory2083.GetProtocol(mbTrans2081)
		argvalue0 := hive_metastore.NewNotificationEventsCountRequest()
		err2085 := argvalue0.Read(context.Background(), jsProt2084)
		if err2085 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetNotificationEventsCount(context.Background(), value0))
		fmt.Print("\n")
		break
	case "fire_listener_event":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FireListenerEvent requires 1 args")
			flag.Usage()
		}
		arg2086 := flag.Arg(1)
		mbTrans2087 := thrift.NewTMemoryBufferLen(len(arg2086))
		defer mbTrans2087.Close()
		_, err2088 := mbTrans2087.WriteString(arg2086)
		if err2088 != nil {
			Usage()
			return
		}
		factory2089 := thrift.NewTJSONProtocolFactory()
		jsProt2090 := factory2089.GetProtocol(mbTrans2087)
		argvalue0 := hive_metastore.NewFireEventRequest()
		err2091 := argvalue0.Read(context.Background(), jsProt2090)
		if err2091 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.FireListenerEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "flushCache":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "FlushCache requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.FlushCache(context.Background()))
		fmt.Print("\n")
		break
	case "add_write_notification_log":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddWriteNotificationLog requires 1 args")
			flag.Usage()
		}
		arg2092 := flag.Arg(1)
		mbTrans2093 := thrift.NewTMemoryBufferLen(len(arg2092))
		defer mbTrans2093.Close()
		_, err2094 := mbTrans2093.WriteString(arg2092)
		if err2094 != nil {
			Usage()
			return
		}
		factory2095 := thrift.NewTJSONProtocolFactory()
		jsProt2096 := factory2095.GetProtocol(mbTrans2093)
		argvalue0 := hive_metastore.NewWriteNotificationLogRequest()
		err2097 := argvalue0.Read(context.Background(), jsProt2096)
		if err2097 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddWriteNotificationLog(context.Background(), value0))
		fmt.Print("\n")
		break
	case "cm_recycle":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CmRecycle requires 1 args")
			flag.Usage()
		}
		arg2098 := flag.Arg(1)
		mbTrans2099 := thrift.NewTMemoryBufferLen(len(arg2098))
		defer mbTrans2099.Close()
		_, err2100 := mbTrans2099.WriteString(arg2098)
		if err2100 != nil {
			Usage()
			return
		}
		factory2101 := thrift.NewTJSONProtocolFactory()
		jsProt2102 := factory2101.GetProtocol(mbTrans2099)
		argvalue0 := hive_metastore.NewCmRecycleRequest()
		err2103 := argvalue0.Read(context.Background(), jsProt2102)
		if err2103 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CmRecycle(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_file_metadata_by_expr":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFileMetadataByExpr requires 1 args")
			flag.Usage()
		}
		arg2104 := flag.Arg(1)
		mbTrans2105 := thrift.NewTMemoryBufferLen(len(arg2104))
		defer mbTrans2105.Close()
		_, err2106 := mbTrans2105.WriteString(arg2104)
		if err2106 != nil {
			Usage()
			return
		}
		factory2107 := thrift.NewTJSONProtocolFactory()
		jsProt2108 := factory2107.GetProtocol(mbTrans2105)
		argvalue0 := hive_metastore.NewGetFileMetadataByExprRequest()
		err2109 := argvalue0.Read(context.Background(), jsProt2108)
		if err2109 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetFileMetadataByExpr(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFileMetadata requires 1 args")
			flag.Usage()
		}
		arg2110 := flag.Arg(1)
		mbTrans2111 := thrift.NewTMemoryBufferLen(len(arg2110))
		defer mbTrans2111.Close()
		_, err2112 := mbTrans2111.WriteString(arg2110)
		if err2112 != nil {
			Usage()
			return
		}
		factory2113 := thrift.NewTJSONProtocolFactory()
		jsProt2114 := factory2113.GetProtocol(mbTrans2111)
		argvalue0 := hive_metastore.NewGetFileMetadataRequest()
		err2115 := argvalue0.Read(context.Background(), jsProt2114)
		if err2115 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "put_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PutFileMetadata requires 1 args")
			flag.Usage()
		}
		arg2116 := flag.Arg(1)
		mbTrans2117 := thrift.NewTMemoryBufferLen(len(arg2116))
		defer mbTrans2117.Close()
		_, err2118 := mbTrans2117.WriteString(arg2116)
		if err2118 != nil {
			Usage()
			return
		}
		factory2119 := thrift.NewTJSONProtocolFactory()
		jsProt2120 := factory2119.GetProtocol(mbTrans2117)
		argvalue0 := hive_metastore.NewPutFileMetadataRequest()
		err2121 := argvalue0.Read(context.Background(), jsProt2120)
		if err2121 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PutFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "clear_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ClearFileMetadata requires 1 args")
			flag.Usage()
		}
		arg2122 := flag.Arg(1)
		mbTrans2123 := thrift.NewTMemoryBufferLen(len(arg2122))
		defer mbTrans2123.Close()
		_, err2124 := mbTrans2123.WriteString(arg2122)
		if err2124 != nil {
			Usage()
			return
		}
		factory2125 := thrift.NewTJSONProtocolFactory()
		jsProt2126 := factory2125.GetProtocol(mbTrans2123)
		argvalue0 := hive_metastore.NewClearFileMetadataRequest()
		err2127 := argvalue0.Read(context.Background(), jsProt2126)
		if err2127 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ClearFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "cache_file_metadata":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CacheFileMetadata requires 1 args")
			flag.Usage()
		}
		arg2128 := flag.Arg(1)
		mbTrans2129 := thrift.NewTMemoryBufferLen(len(arg2128))
		defer mbTrans2129.Close()
		_, err2130 := mbTrans2129.WriteString(arg2128)
		if err2130 != nil {
			Usage()
			return
		}
		factory2131 := thrift.NewTJSONProtocolFactory()
		jsProt2132 := factory2131.GetProtocol(mbTrans2129)
		argvalue0 := hive_metastore.NewCacheFileMetadataRequest()
		err2133 := argvalue0.Read(context.Background(), jsProt2132)
		if err2133 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CacheFileMetadata(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_metastore_db_uuid":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetMetastoreDbUUID requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetMetastoreDbUUID(context.Background()))
		fmt.Print("\n")
		break
	case "create_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateResourcePlan requires 1 args")
			flag.Usage()
		}
		arg2134 := flag.Arg(1)
		mbTrans2135 := thrift.NewTMemoryBufferLen(len(arg2134))
		defer mbTrans2135.Close()
		_, err2136 := mbTrans2135.WriteString(arg2134)
		if err2136 != nil {
			Usage()
			return
		}
		factory2137 := thrift.NewTJSONProtocolFactory()
		jsProt2138 := factory2137.GetProtocol(mbTrans2135)
		argvalue0 := hive_metastore.NewWMCreateResourcePlanRequest()
		err2139 := argvalue0.Read(context.Background(), jsProt2138)
		if err2139 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetResourcePlan requires 1 args")
			flag.Usage()
		}
		arg2140 := flag.Arg(1)
		mbTrans2141 := thrift.NewTMemoryBufferLen(len(arg2140))
		defer mbTrans2141.Close()
		_, err2142 := mbTrans2141.WriteString(arg2140)
		if err2142 != nil {
			Usage()
			return
		}
		factory2143 := thrift.NewTJSONProtocolFactory()
		jsProt2144 := factory2143.GetProtocol(mbTrans2141)
		argvalue0 := hive_metastore.NewWMGetResourcePlanRequest()
		err2145 := argvalue0.Read(context.Background(), jsProt2144)
		if err2145 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_active_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetActiveResourcePlan requires 1 args")
			flag.Usage()
		}
		arg2146 := flag.Arg(1)
		mbTrans2147 := thrift.NewTMemoryBufferLen(len(arg2146))
		defer mbTrans2147.Close()
		_, err2148 := mbTrans2147.WriteString(arg2146)
		if err2148 != nil {
			Usage()
			return
		}
		factory2149 := thrift.NewTJSONProtocolFactory()
		jsProt2150 := factory2149.GetProtocol(mbTrans2147)
		argvalue0 := hive_metastore.NewWMGetActiveResourcePlanRequest()
		err2151 := argvalue0.Read(context.Background(), jsProt2150)
		if err2151 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetActiveResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_resource_plans":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllResourcePlans requires 1 args")
			flag.Usage()
		}
		arg2152 := flag.Arg(1)
		mbTrans2153 := thrift.NewTMemoryBufferLen(len(arg2152))
		defer mbTrans2153.Close()
		_, err2154 := mbTrans2153.WriteString(arg2152)
		if err2154 != nil {
			Usage()
			return
		}
		factory2155 := thrift.NewTJSONProtocolFactory()
		jsProt2156 := factory2155.GetProtocol(mbTrans2153)
		argvalue0 := hive_metastore.NewWMGetAllResourcePlanRequest()
		err2157 := argvalue0.Read(context.Background(), jsProt2156)
		if err2157 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetAllResourcePlans(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterResourcePlan requires 1 args")
			flag.Usage()
		}
		arg2158 := flag.Arg(1)
		mbTrans2159 := thrift.NewTMemoryBufferLen(len(arg2158))
		defer mbTrans2159.Close()
		_, err2160 := mbTrans2159.WriteString(arg2158)
		if err2160 != nil {
			Usage()
			return
		}
		factory2161 := thrift.NewTJSONProtocolFactory()
		jsProt2162 := factory2161.GetProtocol(mbTrans2159)
		argvalue0 := hive_metastore.NewWMAlterResourcePlanRequest()
		err2163 := argvalue0.Read(context.Background(), jsProt2162)
		if err2163 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "validate_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ValidateResourcePlan requires 1 args")
			flag.Usage()
		}
		arg2164 := flag.Arg(1)
		mbTrans2165 := thrift.NewTMemoryBufferLen(len(arg2164))
		defer mbTrans2165.Close()
		_, err2166 := mbTrans2165.WriteString(arg2164)
		if err2166 != nil {
			Usage()
			return
		}
		factory2167 := thrift.NewTJSONProtocolFactory()
		jsProt2168 := factory2167.GetProtocol(mbTrans2165)
		argvalue0 := hive_metastore.NewWMValidateResourcePlanRequest()
		err2169 := argvalue0.Read(context.Background(), jsProt2168)
		if err2169 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ValidateResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_resource_plan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropResourcePlan requires 1 args")
			flag.Usage()
		}
		arg2170 := flag.Arg(1)
		mbTrans2171 := thrift.NewTMemoryBufferLen(len(arg2170))
		defer mbTrans2171.Close()
		_, err2172 := mbTrans2171.WriteString(arg2170)
		if err2172 != nil {
			Usage()
			return
		}
		factory2173 := thrift.NewTJSONProtocolFactory()
		jsProt2174 := factory2173.GetProtocol(mbTrans2171)
		argvalue0 := hive_metastore.NewWMDropResourcePlanRequest()
		err2175 := argvalue0.Read(context.Background(), jsProt2174)
		if err2175 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropResourcePlan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_wm_trigger":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateWmTrigger requires 1 args")
			flag.Usage()
		}
		arg2176 := flag.Arg(1)
		mbTrans2177 := thrift.NewTMemoryBufferLen(len(arg2176))
		defer mbTrans2177.Close()
		_, err2178 := mbTrans2177.WriteString(arg2176)
		if err2178 != nil {
			Usage()
			return
		}
		factory2179 := thrift.NewTJSONProtocolFactory()
		jsProt2180 := factory2179.GetProtocol(mbTrans2177)
		argvalue0 := hive_metastore.NewWMCreateTriggerRequest()
		err2181 := argvalue0.Read(context.Background(), jsProt2180)
		if err2181 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateWmTrigger(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_wm_trigger":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterWmTrigger requires 1 args")
			flag.Usage()
		}
		arg2182 := flag.Arg(1)
		mbTrans2183 := thrift.NewTMemoryBufferLen(len(arg2182))
		defer mbTrans2183.Close()
		_, err2184 := mbTrans2183.WriteString(arg2182)
		if err2184 != nil {
			Usage()
			return
		}
		factory2185 := thrift.NewTJSONProtocolFactory()
		jsProt2186 := factory2185.GetProtocol(mbTrans2183)
		argvalue0 := hive_metastore.NewWMAlterTriggerRequest()
		err2187 := argvalue0.Read(context.Background(), jsProt2186)
		if err2187 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterWmTrigger(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_wm_trigger":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropWmTrigger requires 1 args")
			flag.Usage()
		}
		arg2188 := flag.Arg(1)
		mbTrans2189 := thrift.NewTMemoryBufferLen(len(arg2188))
		defer mbTrans2189.Close()
		_, err2190 := mbTrans2189.WriteString(arg2188)
		if err2190 != nil {
			Usage()
			return
		}
		factory2191 := thrift.NewTJSONProtocolFactory()
		jsProt2192 := factory2191.GetProtocol(mbTrans2189)
		argvalue0 := hive_metastore.NewWMDropTriggerRequest()
		err2193 := argvalue0.Read(context.Background(), jsProt2192)
		if err2193 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropWmTrigger(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_triggers_for_resourceplan":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTriggersForResourceplan requires 1 args")
			flag.Usage()
		}
		arg2194 := flag.Arg(1)
		mbTrans2195 := thrift.NewTMemoryBufferLen(len(arg2194))
		defer mbTrans2195.Close()
		_, err2196 := mbTrans2195.WriteString(arg2194)
		if err2196 != nil {
			Usage()
			return
		}
		factory2197 := thrift.NewTJSONProtocolFactory()
		jsProt2198 := factory2197.GetProtocol(mbTrans2195)
		argvalue0 := hive_metastore.NewWMGetTriggersForResourePlanRequest()
		err2199 := argvalue0.Read(context.Background(), jsProt2198)
		if err2199 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTriggersForResourceplan(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_wm_pool":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateWmPool requires 1 args")
			flag.Usage()
		}
		arg2200 := flag.Arg(1)
		mbTrans2201 := thrift.NewTMemoryBufferLen(len(arg2200))
		defer mbTrans2201.Close()
		_, err2202 := mbTrans2201.WriteString(arg2200)
		if err2202 != nil {
			Usage()
			return
		}
		factory2203 := thrift.NewTJSONProtocolFactory()
		jsProt2204 := factory2203.GetProtocol(mbTrans2201)
		argvalue0 := hive_metastore.NewWMCreatePoolRequest()
		err2205 := argvalue0.Read(context.Background(), jsProt2204)
		if err2205 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateWmPool(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_wm_pool":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterWmPool requires 1 args")
			flag.Usage()
		}
		arg2206 := flag.Arg(1)
		mbTrans2207 := thrift.NewTMemoryBufferLen(len(arg2206))
		defer mbTrans2207.Close()
		_, err2208 := mbTrans2207.WriteString(arg2206)
		if err2208 != nil {
			Usage()
			return
		}
		factory2209 := thrift.NewTJSONProtocolFactory()
		jsProt2210 := factory2209.GetProtocol(mbTrans2207)
		argvalue0 := hive_metastore.NewWMAlterPoolRequest()
		err2211 := argvalue0.Read(context.Background(), jsProt2210)
		if err2211 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterWmPool(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_wm_pool":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropWmPool requires 1 args")
			flag.Usage()
		}
		arg2212 := flag.Arg(1)
		mbTrans2213 := thrift.NewTMemoryBufferLen(len(arg2212))
		defer mbTrans2213.Close()
		_, err2214 := mbTrans2213.WriteString(arg2212)
		if err2214 != nil {
			Usage()
			return
		}
		factory2215 := thrift.NewTJSONProtocolFactory()
		jsProt2216 := factory2215.GetProtocol(mbTrans2213)
		argvalue0 := hive_metastore.NewWMDropPoolRequest()
		err2217 := argvalue0.Read(context.Background(), jsProt2216)
		if err2217 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropWmPool(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_or_update_wm_mapping":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateOrUpdateWmMapping requires 1 args")
			flag.Usage()
		}
		arg2218 := flag.Arg(1)
		mbTrans2219 := thrift.NewTMemoryBufferLen(len(arg2218))
		defer mbTrans2219.Close()
		_, err2220 := mbTrans2219.WriteString(arg2218)
		if err2220 != nil {
			Usage()
			return
		}
		factory2221 := thrift.NewTJSONProtocolFactory()
		jsProt2222 := factory2221.GetProtocol(mbTrans2219)
		argvalue0 := hive_metastore.NewWMCreateOrUpdateMappingRequest()
		err2223 := argvalue0.Read(context.Background(), jsProt2222)
		if err2223 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateOrUpdateWmMapping(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_wm_mapping":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropWmMapping requires 1 args")
			flag.Usage()
		}
		arg2224 := flag.Arg(1)
		mbTrans2225 := thrift.NewTMemoryBufferLen(len(arg2224))
		defer mbTrans2225.Close()
		_, err2226 := mbTrans2225.WriteString(arg2224)
		if err2226 != nil {
			Usage()
			return
		}
		factory2227 := thrift.NewTJSONProtocolFactory()
		jsProt2228 := factory2227.GetProtocol(mbTrans2225)
		argvalue0 := hive_metastore.NewWMDropMappingRequest()
		err2229 := argvalue0.Read(context.Background(), jsProt2228)
		if err2229 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropWmMapping(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_or_drop_wm_trigger_to_pool_mapping":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateOrDropWmTriggerToPoolMapping requires 1 args")
			flag.Usage()
		}
		arg2230 := flag.Arg(1)
		mbTrans2231 := thrift.NewTMemoryBufferLen(len(arg2230))
		defer mbTrans2231.Close()
		_, err2232 := mbTrans2231.WriteString(arg2230)
		if err2232 != nil {
			Usage()
			return
		}
		factory2233 := thrift.NewTJSONProtocolFactory()
		jsProt2234 := factory2233.GetProtocol(mbTrans2231)
		argvalue0 := hive_metastore.NewWMCreateOrDropTriggerToPoolMappingRequest()
		err2235 := argvalue0.Read(context.Background(), jsProt2234)
		if err2235 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateOrDropWmTriggerToPoolMapping(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_ischema":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateIschema requires 1 args")
			flag.Usage()
		}
		arg2236 := flag.Arg(1)
		mbTrans2237 := thrift.NewTMemoryBufferLen(len(arg2236))
		defer mbTrans2237.Close()
		_, err2238 := mbTrans2237.WriteString(arg2236)
		if err2238 != nil {
			Usage()
			return
		}
		factory2239 := thrift.NewTJSONProtocolFactory()
		jsProt2240 := factory2239.GetProtocol(mbTrans2237)
		argvalue0 := hive_metastore.NewISchema()
		err2241 := argvalue0.Read(context.Background(), jsProt2240)
		if err2241 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateIschema(context.Background(), value0))
		fmt.Print("\n")
		break
	case "alter_ischema":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AlterIschema requires 1 args")
			flag.Usage()
		}
		arg2242 := flag.Arg(1)
		mbTrans2243 := thrift.NewTMemoryBufferLen(len(arg2242))
		defer mbTrans2243.Close()
		_, err2244 := mbTrans2243.WriteString(arg2242)
		if err2244 != nil {
			Usage()
			return
		}
		factory2245 := thrift.NewTJSONProtocolFactory()
		jsProt2246 := factory2245.GetProtocol(mbTrans2243)
		argvalue0 := hive_metastore.NewAlterISchemaRequest()
		err2247 := argvalue0.Read(context.Background(), jsProt2246)
		if err2247 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AlterIschema(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_ischema":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetIschema requires 1 args")
			flag.Usage()
		}
		arg2248 := flag.Arg(1)
		mbTrans2249 := thrift.NewTMemoryBufferLen(len(arg2248))
		defer mbTrans2249.Close()
		_, err2250 := mbTrans2249.WriteString(arg2248)
		if err2250 != nil {
			Usage()
			return
		}
		factory2251 := thrift.NewTJSONProtocolFactory()
		jsProt2252 := factory2251.GetProtocol(mbTrans2249)
		argvalue0 := hive_metastore.NewISchemaName()
		err2253 := argvalue0.Read(context.Background(), jsProt2252)
		if err2253 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetIschema(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_ischema":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropIschema requires 1 args")
			flag.Usage()
		}
		arg2254 := flag.Arg(1)
		mbTrans2255 := thrift.NewTMemoryBufferLen(len(arg2254))
		defer mbTrans2255.Close()
		_, err2256 := mbTrans2255.WriteString(arg2254)
		if err2256 != nil {
			Usage()
			return
		}
		factory2257 := thrift.NewTJSONProtocolFactory()
		jsProt2258 := factory2257.GetProtocol(mbTrans2255)
		argvalue0 := hive_metastore.NewISchemaName()
		err2259 := argvalue0.Read(context.Background(), jsProt2258)
		if err2259 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropIschema(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_schema_version":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddSchemaVersion requires 1 args")
			flag.Usage()
		}
		arg2260 := flag.Arg(1)
		mbTrans2261 := thrift.NewTMemoryBufferLen(len(arg2260))
		defer mbTrans2261.Close()
		_, err2262 := mbTrans2261.WriteString(arg2260)
		if err2262 != nil {
			Usage()
			return
		}
		factory2263 := thrift.NewTJSONProtocolFactory()
		jsProt2264 := factory2263.GetProtocol(mbTrans2261)
		argvalue0 := hive_metastore.NewSchemaVersion()
		err2265 := argvalue0.Read(context.Background(), jsProt2264)
		if err2265 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddSchemaVersion(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_schema_version":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSchemaVersion requires 1 args")
			flag.Usage()
		}
		arg2266 := flag.Arg(1)
		mbTrans2267 := thrift.NewTMemoryBufferLen(len(arg2266))
		defer mbTrans2267.Close()
		_, err2268 := mbTrans2267.WriteString(arg2266)
		if err2268 != nil {
			Usage()
			return
		}
		factory2269 := thrift.NewTJSONProtocolFactory()
		jsProt2270 := factory2269.GetProtocol(mbTrans2267)
		argvalue0 := hive_metastore.NewSchemaVersionDescriptor()
		err2271 := argvalue0.Read(context.Background(), jsProt2270)
		if err2271 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetSchemaVersion(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_schema_latest_version":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSchemaLatestVersion requires 1 args")
			flag.Usage()
		}
		arg2272 := flag.Arg(1)
		mbTrans2273 := thrift.NewTMemoryBufferLen(len(arg2272))
		defer mbTrans2273.Close()
		_, err2274 := mbTrans2273.WriteString(arg2272)
		if err2274 != nil {
			Usage()
			return
		}
		factory2275 := thrift.NewTJSONProtocolFactory()
		jsProt2276 := factory2275.GetProtocol(mbTrans2273)
		argvalue0 := hive_metastore.NewISchemaName()
		err2277 := argvalue0.Read(context.Background(), jsProt2276)
		if err2277 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetSchemaLatestVersion(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_schema_all_versions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSchemaAllVersions requires 1 args")
			flag.Usage()
		}
		arg2278 := flag.Arg(1)
		mbTrans2279 := thrift.NewTMemoryBufferLen(len(arg2278))
		defer mbTrans2279.Close()
		_, err2280 := mbTrans2279.WriteString(arg2278)
		if err2280 != nil {
			Usage()
			return
		}
		factory2281 := thrift.NewTJSONProtocolFactory()
		jsProt2282 := factory2281.GetProtocol(mbTrans2279)
		argvalue0 := hive_metastore.NewISchemaName()
		err2283 := argvalue0.Read(context.Background(), jsProt2282)
		if err2283 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetSchemaAllVersions(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_schema_version":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropSchemaVersion requires 1 args")
			flag.Usage()
		}
		arg2284 := flag.Arg(1)
		mbTrans2285 := thrift.NewTMemoryBufferLen(len(arg2284))
		defer mbTrans2285.Close()
		_, err2286 := mbTrans2285.WriteString(arg2284)
		if err2286 != nil {
			Usage()
			return
		}
		factory2287 := thrift.NewTJSONProtocolFactory()
		jsProt2288 := factory2287.GetProtocol(mbTrans2285)
		argvalue0 := hive_metastore.NewSchemaVersionDescriptor()
		err2289 := argvalue0.Read(context.Background(), jsProt2288)
		if err2289 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropSchemaVersion(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_schemas_by_cols":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSchemasByCols requires 1 args")
			flag.Usage()
		}
		arg2290 := flag.Arg(1)
		mbTrans2291 := thrift.NewTMemoryBufferLen(len(arg2290))
		defer mbTrans2291.Close()
		_, err2292 := mbTrans2291.WriteString(arg2290)
		if err2292 != nil {
			Usage()
			return
		}
		factory2293 := thrift.NewTJSONProtocolFactory()
		jsProt2294 := factory2293.GetProtocol(mbTrans2291)
		argvalue0 := hive_metastore.NewFindSchemasByColsRqst()
		err2295 := argvalue0.Read(context.Background(), jsProt2294)
		if err2295 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetSchemasByCols(context.Background(), value0))
		fmt.Print("\n")
		break
	case "map_schema_version_to_serde":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MapSchemaVersionToSerde requires 1 args")
			flag.Usage()
		}
		arg2296 := flag.Arg(1)
		mbTrans2297 := thrift.NewTMemoryBufferLen(len(arg2296))
		defer mbTrans2297.Close()
		_, err2298 := mbTrans2297.WriteString(arg2296)
		if err2298 != nil {
			Usage()
			return
		}
		factory2299 := thrift.NewTJSONProtocolFactory()
		jsProt2300 := factory2299.GetProtocol(mbTrans2297)
		argvalue0 := hive_metastore.NewMapSchemaVersionToSerdeRequest()
		err2301 := argvalue0.Read(context.Background(), jsProt2300)
		if err2301 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.MapSchemaVersionToSerde(context.Background(), value0))
		fmt.Print("\n")
		break
	case "set_schema_version_state":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SetSchemaVersionState requires 1 args")
			flag.Usage()
		}
		arg2302 := flag.Arg(1)
		mbTrans2303 := thrift.NewTMemoryBufferLen(len(arg2302))
		defer mbTrans2303.Close()
		_, err2304 := mbTrans2303.WriteString(arg2302)
		if err2304 != nil {
			Usage()
			return
		}
		factory2305 := thrift.NewTJSONProtocolFactory()
		jsProt2306 := factory2305.GetProtocol(mbTrans2303)
		argvalue0 := hive_metastore.NewSetSchemaVersionStateRequest()
		err2307 := argvalue0.Read(context.Background(), jsProt2306)
		if err2307 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SetSchemaVersionState(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_serde":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddSerde requires 1 args")
			flag.Usage()
		}
		arg2308 := flag.Arg(1)
		mbTrans2309 := thrift.NewTMemoryBufferLen(len(arg2308))
		defer mbTrans2309.Close()
		_, err2310 := mbTrans2309.WriteString(arg2308)
		if err2310 != nil {
			Usage()
			return
		}
		factory2311 := thrift.NewTJSONProtocolFactory()
		jsProt2312 := factory2311.GetProtocol(mbTrans2309)
		argvalue0 := hive_metastore.NewSerDeInfo()
		err2313 := argvalue0.Read(context.Background(), jsProt2312)
		if err2313 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddSerde(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_serde":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSerde requires 1 args")
			flag.Usage()
		}
		arg2314 := flag.Arg(1)
		mbTrans2315 := thrift.NewTMemoryBufferLen(len(arg2314))
		defer mbTrans2315.Close()
		_, err2316 := mbTrans2315.WriteString(arg2314)
		if err2316 != nil {
			Usage()
			return
		}
		factory2317 := thrift.NewTJSONProtocolFactory()
		jsProt2318 := factory2317.GetProtocol(mbTrans2315)
		argvalue0 := hive_metastore.NewGetSerdeRequest()
		err2319 := argvalue0.Read(context.Background(), jsProt2318)
		if err2319 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetSerde(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_lock_materialization_rebuild":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetLockMaterializationRebuild requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2, err2322 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err2322 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetLockMaterializationRebuild(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "heartbeat_lock_materialization_rebuild":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "HeartbeatLockMaterializationRebuild requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2, err2325 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err2325 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.HeartbeatLockMaterializationRebuild(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "add_runtime_stats":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddRuntimeStats requires 1 args")
			flag.Usage()
		}
		arg2326 := flag.Arg(1)
		mbTrans2327 := thrift.NewTMemoryBufferLen(len(arg2326))
		defer mbTrans2327.Close()
		_, err2328 := mbTrans2327.WriteString(arg2326)
		if err2328 != nil {
			Usage()
			return
		}
		factory2329 := thrift.NewTJSONProtocolFactory()
		jsProt2330 := factory2329.GetProtocol(mbTrans2327)
		argvalue0 := hive_metastore.NewRuntimeStat()
		err2331 := argvalue0.Read(context.Background(), jsProt2330)
		if err2331 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddRuntimeStats(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_runtime_stats":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRuntimeStats requires 1 args")
			flag.Usage()
		}
		arg2332 := flag.Arg(1)
		mbTrans2333 := thrift.NewTMemoryBufferLen(len(arg2332))
		defer mbTrans2333.Close()
		_, err2334 := mbTrans2333.WriteString(arg2332)
		if err2334 != nil {
			Usage()
			return
		}
		factory2335 := thrift.NewTJSONProtocolFactory()
		jsProt2336 := factory2335.GetProtocol(mbTrans2333)
		argvalue0 := hive_metastore.NewGetRuntimeStatsRequest()
		err2337 := argvalue0.Read(context.Background(), jsProt2336)
		if err2337 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetRuntimeStats(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_partitions_with_specs":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPartitionsWithSpecs requires 1 args")
			flag.Usage()
		}
		arg2338 := flag.Arg(1)
		mbTrans2339 := thrift.NewTMemoryBufferLen(len(arg2338))
		defer mbTrans2339.Close()
		_, err2340 := mbTrans2339.WriteString(arg2338)
		if err2340 != nil {
			Usage()
			return
		}
		factory2341 := thrift.NewTJSONProtocolFactory()
		jsProt2342 := factory2341.GetProtocol(mbTrans2339)
		argvalue0 := hive_metastore.NewGetPartitionsRequest()
		err2343 := argvalue0.Read(context.Background(), jsProt2342)
		if err2343 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPartitionsWithSpecs(context.Background(), value0))
		fmt.Print("\n")
		break
	case "scheduled_query_poll":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScheduledQueryPoll requires 1 args")
			flag.Usage()
		}
		arg2344 := flag.Arg(1)
		mbTrans2345 := thrift.NewTMemoryBufferLen(len(arg2344))
		defer mbTrans2345.Close()
		_, err2346 := mbTrans2345.WriteString(arg2344)
		if err2346 != nil {
			Usage()
			return
		}
		factory2347 := thrift.NewTJSONProtocolFactory()
		jsProt2348 := factory2347.GetProtocol(mbTrans2345)
		argvalue0 := hive_metastore.NewScheduledQueryPollRequest()
		err2349 := argvalue0.Read(context.Background(), jsProt2348)
		if err2349 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ScheduledQueryPoll(context.Background(), value0))
		fmt.Print("\n")
		break
	case "scheduled_query_maintenance":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScheduledQueryMaintenance requires 1 args")
			flag.Usage()
		}
		arg2350 := flag.Arg(1)
		mbTrans2351 := thrift.NewTMemoryBufferLen(len(arg2350))
		defer mbTrans2351.Close()
		_, err2352 := mbTrans2351.WriteString(arg2350)
		if err2352 != nil {
			Usage()
			return
		}
		factory2353 := thrift.NewTJSONProtocolFactory()
		jsProt2354 := factory2353.GetProtocol(mbTrans2351)
		argvalue0 := hive_metastore.NewScheduledQueryMaintenanceRequest()
		err2355 := argvalue0.Read(context.Background(), jsProt2354)
		if err2355 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ScheduledQueryMaintenance(context.Background(), value0))
		fmt.Print("\n")
		break
	case "scheduled_query_progress":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScheduledQueryProgress requires 1 args")
			flag.Usage()
		}
		arg2356 := flag.Arg(1)
		mbTrans2357 := thrift.NewTMemoryBufferLen(len(arg2356))
		defer mbTrans2357.Close()
		_, err2358 := mbTrans2357.WriteString(arg2356)
		if err2358 != nil {
			Usage()
			return
		}
		factory2359 := thrift.NewTJSONProtocolFactory()
		jsProt2360 := factory2359.GetProtocol(mbTrans2357)
		argvalue0 := hive_metastore.NewScheduledQueryProgressInfo()
		err2361 := argvalue0.Read(context.Background(), jsProt2360)
		if err2361 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ScheduledQueryProgress(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_scheduled_query":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetScheduledQuery requires 1 args")
			flag.Usage()
		}
		arg2362 := flag.Arg(1)
		mbTrans2363 := thrift.NewTMemoryBufferLen(len(arg2362))
		defer mbTrans2363.Close()
		_, err2364 := mbTrans2363.WriteString(arg2362)
		if err2364 != nil {
			Usage()
			return
		}
		factory2365 := thrift.NewTJSONProtocolFactory()
		jsProt2366 := factory2365.GetProtocol(mbTrans2363)
		argvalue0 := hive_metastore.NewScheduledQueryKey()
		err2367 := argvalue0.Read(context.Background(), jsProt2366)
		if err2367 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetScheduledQuery(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_replication_metrics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddReplicationMetrics requires 1 args")
			flag.Usage()
		}
		arg2368 := flag.Arg(1)
		mbTrans2369 := thrift.NewTMemoryBufferLen(len(arg2368))
		defer mbTrans2369.Close()
		_, err2370 := mbTrans2369.WriteString(arg2368)
		if err2370 != nil {
			Usage()
			return
		}
		factory2371 := thrift.NewTJSONProtocolFactory()
		jsProt2372 := factory2371.GetProtocol(mbTrans2369)
		argvalue0 := hive_metastore.NewReplicationMetricList()
		err2373 := argvalue0.Read(context.Background(), jsProt2372)
		if err2373 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddReplicationMetrics(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_replication_metrics":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetReplicationMetrics requires 1 args")
			flag.Usage()
		}
		arg2374 := flag.Arg(1)
		mbTrans2375 := thrift.NewTMemoryBufferLen(len(arg2374))
		defer mbTrans2375.Close()
		_, err2376 := mbTrans2375.WriteString(arg2374)
		if err2376 != nil {
			Usage()
			return
		}
		factory2377 := thrift.NewTJSONProtocolFactory()
		jsProt2378 := factory2377.GetProtocol(mbTrans2375)
		argvalue0 := hive_metastore.NewGetReplicationMetricsRequest()
		err2379 := argvalue0.Read(context.Background(), jsProt2378)
		if err2379 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetReplicationMetrics(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_open_txns_req":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetOpenTxnsReq requires 1 args")
			flag.Usage()
		}
		arg2380 := flag.Arg(1)
		mbTrans2381 := thrift.NewTMemoryBufferLen(len(arg2380))
		defer mbTrans2381.Close()
		_, err2382 := mbTrans2381.WriteString(arg2380)
		if err2382 != nil {
			Usage()
			return
		}
		factory2383 := thrift.NewTJSONProtocolFactory()
		jsProt2384 := factory2383.GetProtocol(mbTrans2381)
		argvalue0 := hive_metastore.NewGetOpenTxnsRequest()
		err2385 := argvalue0.Read(context.Background(), jsProt2384)
		if err2385 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetOpenTxnsReq(context.Background(), value0))
		fmt.Print("\n")
		break
	case "create_stored_procedure":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateStoredProcedure requires 1 args")
			flag.Usage()
		}
		arg2386 := flag.Arg(1)
		mbTrans2387 := thrift.NewTMemoryBufferLen(len(arg2386))
		defer mbTrans2387.Close()
		_, err2388 := mbTrans2387.WriteString(arg2386)
		if err2388 != nil {
			Usage()
			return
		}
		factory2389 := thrift.NewTJSONProtocolFactory()
		jsProt2390 := factory2389.GetProtocol(mbTrans2387)
		argvalue0 := hive_metastore.NewStoredProcedure()
		err2391 := argvalue0.Read(context.Background(), jsProt2390)
		if err2391 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateStoredProcedure(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_stored_procedure":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetStoredProcedure requires 1 args")
			flag.Usage()
		}
		arg2392 := flag.Arg(1)
		mbTrans2393 := thrift.NewTMemoryBufferLen(len(arg2392))
		defer mbTrans2393.Close()
		_, err2394 := mbTrans2393.WriteString(arg2392)
		if err2394 != nil {
			Usage()
			return
		}
		factory2395 := thrift.NewTJSONProtocolFactory()
		jsProt2396 := factory2395.GetProtocol(mbTrans2393)
		argvalue0 := hive_metastore.NewStoredProcedureRequest()
		err2397 := argvalue0.Read(context.Background(), jsProt2396)
		if err2397 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetStoredProcedure(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_stored_procedure":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropStoredProcedure requires 1 args")
			flag.Usage()
		}
		arg2398 := flag.Arg(1)
		mbTrans2399 := thrift.NewTMemoryBufferLen(len(arg2398))
		defer mbTrans2399.Close()
		_, err2400 := mbTrans2399.WriteString(arg2398)
		if err2400 != nil {
			Usage()
			return
		}
		factory2401 := thrift.NewTJSONProtocolFactory()
		jsProt2402 := factory2401.GetProtocol(mbTrans2399)
		argvalue0 := hive_metastore.NewStoredProcedureRequest()
		err2403 := argvalue0.Read(context.Background(), jsProt2402)
		if err2403 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropStoredProcedure(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_stored_procedures":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllStoredProcedures requires 1 args")
			flag.Usage()
		}
		arg2404 := flag.Arg(1)
		mbTrans2405 := thrift.NewTMemoryBufferLen(len(arg2404))
		defer mbTrans2405.Close()
		_, err2406 := mbTrans2405.WriteString(arg2404)
		if err2406 != nil {
			Usage()
			return
		}
		factory2407 := thrift.NewTJSONProtocolFactory()
		jsProt2408 := factory2407.GetProtocol(mbTrans2405)
		argvalue0 := hive_metastore.NewListStoredProcedureRequest()
		err2409 := argvalue0.Read(context.Background(), jsProt2408)
		if err2409 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetAllStoredProcedures(context.Background(), value0))
		fmt.Print("\n")
		break
	case "find_package":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindPackage requires 1 args")
			flag.Usage()
		}
		arg2410 := flag.Arg(1)
		mbTrans2411 := thrift.NewTMemoryBufferLen(len(arg2410))
		defer mbTrans2411.Close()
		_, err2412 := mbTrans2411.WriteString(arg2410)
		if err2412 != nil {
			Usage()
			return
		}
		factory2413 := thrift.NewTJSONProtocolFactory()
		jsProt2414 := factory2413.GetProtocol(mbTrans2411)
		argvalue0 := hive_metastore.NewGetPackageRequest()
		err2415 := argvalue0.Read(context.Background(), jsProt2414)
		if err2415 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.FindPackage(context.Background(), value0))
		fmt.Print("\n")
		break
	case "add_package":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddPackage requires 1 args")
			flag.Usage()
		}
		arg2416 := flag.Arg(1)
		mbTrans2417 := thrift.NewTMemoryBufferLen(len(arg2416))
		defer mbTrans2417.Close()
		_, err2418 := mbTrans2417.WriteString(arg2416)
		if err2418 != nil {
			Usage()
			return
		}
		factory2419 := thrift.NewTJSONProtocolFactory()
		jsProt2420 := factory2419.GetProtocol(mbTrans2417)
		argvalue0 := hive_metastore.NewAddPackageRequest()
		err2421 := argvalue0.Read(context.Background(), jsProt2420)
		if err2421 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.AddPackage(context.Background(), value0))
		fmt.Print("\n")
		break
	case "get_all_packages":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetAllPackages requires 1 args")
			flag.Usage()
		}
		arg2422 := flag.Arg(1)
		mbTrans2423 := thrift.NewTMemoryBufferLen(len(arg2422))
		defer mbTrans2423.Close()
		_, err2424 := mbTrans2423.WriteString(arg2422)
		if err2424 != nil {
			Usage()
			return
		}
		factory2425 := thrift.NewTJSONProtocolFactory()
		jsProt2426 := factory2425.GetProtocol(mbTrans2423)
		argvalue0 := hive_metastore.NewListPackageRequest()
		err2427 := argvalue0.Read(context.Background(), jsProt2426)
		if err2427 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetAllPackages(context.Background(), value0))
		fmt.Print("\n")
		break
	case "drop_package":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DropPackage requires 1 args")
			flag.Usage()
		}
		arg2428 := flag.Arg(1)
		mbTrans2429 := thrift.NewTMemoryBufferLen(len(arg2428))
		defer mbTrans2429.Close()
		_, err2430 := mbTrans2429.WriteString(arg2428)
		if err2430 != nil {
			Usage()
			return
		}
		factory2431 := thrift.NewTJSONProtocolFactory()
		jsProt2432 := factory2431.GetProtocol(mbTrans2429)
		argvalue0 := hive_metastore.NewDropPackageRequest()
		err2433 := argvalue0.Read(context.Background(), jsProt2432)
		if err2433 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DropPackage(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getName":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetName requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetName(context.Background()))
		fmt.Print("\n")
		break
	case "getVersion":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetVersion requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetVersion(context.Background()))
		fmt.Print("\n")
		break
	case "getStatus":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetStatus requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetStatus(context.Background()))
		fmt.Print("\n")
		break
	case "getStatusDetails":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetStatusDetails requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetStatusDetails(context.Background()))
		fmt.Print("\n")
		break
	case "getCounters":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetCounters requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetCounters(context.Background()))
		fmt.Print("\n")
		break
	case "getCounter":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCounter requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetCounter(context.Background(), value0))
		fmt.Print("\n")
		break
	case "setOption":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetOption requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SetOption(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getOption":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetOption requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetOption(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getOptions":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOptions requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOptions(context.Background()))
		fmt.Print("\n")
		break
	case "getCpuProfile":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCpuProfile requires 1 args")
			flag.Usage()
		}
		tmp0, err2438 := (strconv.Atoi(flag.Arg(1)))
		if err2438 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetCpuProfile(context.Background(), value0))
		fmt.Print("\n")
		break
	case "aliveSince":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "AliveSince requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.AliveSince(context.Background()))
		fmt.Print("\n")
		break
	case "reinitialize":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Reinitialize requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Reinitialize(context.Background()))
		fmt.Print("\n")
		break
	case "shutdown":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Shutdown requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Shutdown(context.Background()))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
